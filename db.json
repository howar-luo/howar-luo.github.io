{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"97c72cb53310bdefe873c31f8fd7c056f174ea7d","modified":1531578812286},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1531578812321},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1531578812321},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1531578812323},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1531578812322},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1531578812324},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1531578812323},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1531578812324},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1531578812324},{"_id":"themes/next/_config.yml","hash":"91699ed059ad4f212b4be05a8b24e32781cdcc06","modified":1532874205654},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1531578812325},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1531578812325},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1531578812325},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1531578812326},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1531578812326},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1531578812325},{"_id":"source/_posts/i-am-a-cpu.md","hash":"e94e861316e0f6c9d0963023a32567029c53bdbd","modified":1532859015047},{"_id":"source/_posts/input_output_error.md","hash":"acd9bc5d4de07f13e035644b61b69803c5f3c84a","modified":1532856465328},{"_id":"source/_posts/linux-boot.md","hash":"dccdbc5be27f45aba4e7a62fbfb93804799f4296","modified":1532859390515},{"_id":"source/_posts/linux-process-1.md","hash":"7d0c7444677678d49a6724c0d32d3e8ccc807b22","modified":1532873713304},{"_id":"source/_posts/linux-process-2.md","hash":"83af79afd4178cd6a88d212841ac69159b4b1723","modified":1533469202093},{"_id":"source/_posts/makefile.md","hash":"c9b14a33124976e46e711acb72afad39a067aeed","modified":1532856779375},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1531578812354},{"_id":"source/about/index.md","hash":"a07a2aeb6167f10d0a5cc69351af0a2c22185262","modified":1532855899891},{"_id":"source/tags/index.md","hash":"97178ae805fa00c2a158efff861fa51d92398d67","modified":1532855632109},{"_id":"source/categories/index.md","hash":"d6b12f4dad154218ff632d52339a2feeac95750c","modified":1532855648297},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1531578812322},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1531578812323},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1531578812327},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1531578812323},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1531578812323},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1531578812327},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1531578812327},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1531578812327},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1531578812327},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1531578812328},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1531578812328},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1531578812328},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1531578812329},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1531578812329},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1531578812330},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1531578812330},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1531578812330},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1531578812331},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1531578812331},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1531578812331},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1531578812332},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1531578812353},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1531578812352},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1531578812353},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1531578812353},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1531578812354},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1531578812355},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1531578812353},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1531578812353},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1531578812354},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1531578812449},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1531578812450},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1531578812449},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531578812392},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1531578812332},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1531578812332},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1531578812333},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1531578812333},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1531578812334},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1531578812333},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1531578812334},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1531578812334},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1531578812335},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1531578812336},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1531578812335},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1531578812335},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1531578812337},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1531578812336},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1531578812337},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1531578812340},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1531578812340},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1531578812348},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1531578812342},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1531578812349},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1531578812349},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1531578812350},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1531578812350},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1531578812349},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1531578812350},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1531578812355},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1531578812355},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1531578812356},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1531578812356},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1531578812356},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1531578812357},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1531578812358},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1531578812357},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1531578812358},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1531578812392},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1531578812393},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1531578812393},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1531578812392},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1531578812393},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1531578812393},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1531578812395},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1531578812394},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1531578812397},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1531578812396},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1531578812397},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1531578812395},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1531578812397},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1531578812396},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1531578812395},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1531578812397},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1531578812398},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1531578812398},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1531578812398},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531578812341},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531578812341},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531578812382},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531578812383},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531578812383},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531578812391},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1531578812391},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1531578812336},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1531578812336},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1531578812338},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1531578812338},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1531578812338},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1531578812339},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1531578812339},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1531578812342},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1531578812339},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1531578812342},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1531578812340},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1531578812343},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1531578812344},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1531578812343},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1531578812342},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1531578812345},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1531578812343},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1531578812344},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1531578812344},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1531578812341},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1531578812345},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1531578812345},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1531578812341},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1531578812346},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1531578812346},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1531578812346},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1531578812341},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1531578812347},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1531578812347},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1531578812346},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1531578812348},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1531578812347},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1531578812348},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1531578812348},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1531578812352},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1531578812352},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1531578812351},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1531578812351},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1531578812382},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1531578812383},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1531578812382},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1531578812391},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1531578812391},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1531578812383},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1531578812390},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1531578812391},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1531578812399},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1531578812399},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1531578812399},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1531578812400},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1531578812400},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1531578812400},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1531578812403},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1531578812403},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1531578812401},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1531578812404},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1531578812410},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1531578812404},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1531578812419},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1531578812413},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1531578812422},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1531578812420},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1531578812413},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1531578812419},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1531578812422},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1531578812420},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1531578812422},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1531578812421},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1531578812422},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1531578812433},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1531578812433},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1531578812432},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1531578812433},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1531578812433},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1531578812434},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1531578812435},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1531578812434},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1531578812435},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1531578812435},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1531578812436},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1531578812436},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1531578812436},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1531578812436},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1531578812438},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1531578812437},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1531578812437},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1531578812437},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1531578812437},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1531578812438},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1531578812438},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1531578812438},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1531578812440},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1531578812438},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1531578812441},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1531578812440},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1531578812439},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1531578812446},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1531578812446},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1531578812448},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1531578812448},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1531578812449},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1531578812432},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1531578812351},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1531578812351},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1531578812359},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1531578812359},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1531578812359},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1531578812359},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1531578812359},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1531578812365},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1531578812373},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1531578812380},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1531578812380},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1531578812381},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1531578812380},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1531578812385},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1531578812381},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1531578812384},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1531578812385},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1531578812381},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1531578812380},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1531578812385},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1531578812384},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1531578812386},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1531578812388},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1531578812385},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1531578812384},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1531578812390},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1531578812389},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1531578812387},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1531578812387},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1531578812389},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1531578812387},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1531578812387},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1531578812387},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1531578812389},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1531578812390},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1531578812403},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1531578812408},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1531578812414},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1531578812409},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1531578812409},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1531578812414},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1531578812415},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1531578812415},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1531578812415},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1531578812418},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1531578812418},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1531578812416},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1531578812419},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1531578812420},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1531578812421},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1531578812423},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1531578812424},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1531578812424},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1531578812445},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1531578812445},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1531578812408},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1531578812430},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1531578812431},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1531578812448},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1531578812360},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1531578812360},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1531578812361},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1531578812361},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1531578812362},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1531578812363},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1531578812364},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1531578812364},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1531578812364},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1531578812361},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1531578812370},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1531578812370},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1531578812365},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1531578812370},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1531578812371},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1531578812371},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1531578812372},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1531578812371},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1531578812372},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1531578812365},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1531578812372},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1531578812372},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1531578812366},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1531578812366},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1531578812367},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1531578812366},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1531578812367},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1531578812368},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1531578812369},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1531578812369},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1531578812369},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1531578812367},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1531578812368},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1531578812369},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1531578812368},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1531578812362},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1531578812373},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1531578812363},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1531578812374},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1531578812369},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1531578812374},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1531578812363},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1531578812373},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1531578812374},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1531578812375},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1531578812377},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1531578812375},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1531578812375},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1531578812377},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1531578812375},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1531578812377},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1531578812378},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1531578812376},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1531578812379},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1531578812378},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1531578812379},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1531578812386},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1531578812386},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1531578812379},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1531578812377},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1531578812388},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1531578812406},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1531578812405},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1531578812407},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1531578812407},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1531578812406},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1531578812416},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1531578812417},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1531578812417},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1531578812417},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1531578812417},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1531578812418},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1531578812425},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1531578812427},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1531578812430},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1531578812413},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1531578812444},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1531578812429},{"_id":"public/about/index.html","hash":"789adc3471e153f5d9eaaebbc5ac3fe110c4511a","modified":1533469377740},{"_id":"public/categories/index.html","hash":"5ade43e29c898a44f33f8591f4ed4ce462f49697","modified":1533469377740},{"_id":"public/tags/index.html","hash":"3ecf11b9a2b1acf6c5088ad7227108388647e04e","modified":1533469377740},{"_id":"public/archives/index.html","hash":"177805c369674e913928472a260797a4535fbb9c","modified":1533469377740},{"_id":"public/archives/2018/07/index.html","hash":"9acafcf260a033f3a144e0c46f29ae5c1c48172e","modified":1533469377740},{"_id":"public/archives/2018/index.html","hash":"8ce2784f2a0d851fff8673df9b47566e55f3701f","modified":1533469377740},{"_id":"public/categories/CPU/index.html","hash":"012e1a6607ca24f525d1d40c660f943ca4bd3cf9","modified":1533469377740},{"_id":"public/categories/Linux/index.html","hash":"23319f8e441bbff24af48b7bd4766d03942b96c2","modified":1533469377740},{"_id":"public/categories/Shell/index.html","hash":"8ff11cb6b2e88d7ea49f7b143d51c2e50c675a32","modified":1533469377740},{"_id":"public/tags/CPU/index.html","hash":"58e97b265fa45c71fe7fafad70a86223da15b76a","modified":1533469377740},{"_id":"public/tags/Shell/index.html","hash":"5a421a28e0ce0a163762ed8bbae33d0cee211da6","modified":1533469377740},{"_id":"public/tags/bootup/index.html","hash":"09d6f819a7bb239a680448bb6a36f1755974c80d","modified":1533469377740},{"_id":"public/tags/Process/index.html","hash":"aa2e306d7b69a26beec3906ef10cd88e6f2bd3b9","modified":1533469377740},{"_id":"public/tags/Makefile/index.html","hash":"272996179169f2e65ea7de4390c969765c8797db","modified":1533469377740},{"_id":"public/2018/07/19/linux-process-1/index.html","hash":"061c9afe63be9b48c56400703fdebcf2d5911fbc","modified":1533469377740},{"_id":"public/2018/07/18/linux-boot/index.html","hash":"7268f384ea36e054600f4c2453a7313b1e5c2a09","modified":1533469377740},{"_id":"public/2018/07/17/makefile/index.html","hash":"831d0aae0a0066cc6cd46ab8a5d51e4471d6cd3a","modified":1533469377740},{"_id":"public/2018/07/18/i-am-a-cpu/index.html","hash":"67ea5dc71fdb13e47e9f6bc7cd49c62841db0152","modified":1533469377740},{"_id":"public/2018/07/16/input_output_error/index.html","hash":"9a12bfbf22d0b58a265294273ca9f90bc639321c","modified":1533469377740},{"_id":"public/index.html","hash":"3face3ee8cbd97ffe1e8496e501e5e547b10813e","modified":1533469377740},{"_id":"public/2018/07/20/linux-process-2/index.html","hash":"c8ec83c0b647a32340b9fd474b379dea4ae30c0a","modified":1533469377740},{"_id":"public/CNAME","hash":"97c72cb53310bdefe873c31f8fd7c056f174ea7d","modified":1533469377740},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1533469377740},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1533469377740},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1533469377740},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1533469377740},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1533469377740},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1533469377740},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1533469377740},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1533469377740},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1533469377740},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533469377740},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1533469377740},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1533469377740},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1533469377740},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1533469377740},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1533469377740},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1533469377740},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1533469377740},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1533469377740},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1533469377740},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1533469377740},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1533469377740},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1533469377740},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1533469377740},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1533469377740},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1533469377740},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1533469377740},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1533469377740},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1533469377740},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1533469378288},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1533469378288},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1533469378288},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1533469378288},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1533469378288},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1533469378288},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1533469378288},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1533469378304},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1533469378304},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1533469378304},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1533469378304},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1533469378304},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1533469378304},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1533469378304},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1533469378304},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1533469378304},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1533469378304},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1533469378304},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1533469378304},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1533469378304},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1533469378304},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1533469378304},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1533469378304},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1533469378304},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1533469378304},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1533469378304},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1533469378304},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1533469378304},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1533469378304},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1533469378304},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1533469378304},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1533469378304},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1533469378304},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1533469378304},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1533469378304},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1533469378304},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1533469378304},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1533469378304},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1533469378304},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1533469378304},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1533469378304},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1533469378304},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1533469378304},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1533469378304},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1533469378304},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1533469378304},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1533469378304},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1533469378320},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1533469378320},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1533469378320},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1533469378320},{"_id":"public/css/main.css","hash":"fb38c2f98eb6b2435bd66d767c2fb906759db989","modified":1533469378320},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1533469378320},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1533469378320},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1533469378320},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1533469378320},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1533469378320},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1533469378320},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1533469378320},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1533469378320},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1533469378320},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1533469378320},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1533469378320},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1533469378320},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1533469378320},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1533469378320},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1533469378320},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1533469378320},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1533469378320},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1533469378320},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1533469378351},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1533469378351},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1533469378351},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1533469378351},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1533469378351},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1533469378351},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1533469378351},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1533469378351},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1533469378351},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1533469378351},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1533469378351}],"Category":[{"name":"CPU","_id":"cjkgs2ncx00041guop6doy7vr"},{"name":"Shell","_id":"cjkgs2ncx000a1guoss02pbq8"},{"name":"Linux","_id":"cjkgs2ndd000f1guohf7ibin7"}],"Data":[],"Page":[{"title":"about","date":"2018-07-29T09:18:19.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-07-29 17:18:19\n---\n","updated":"2018-07-29T09:18:19.891Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjkgs2ncx00011guo2o1e9a6t","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-07-29T08:55:58.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-07-29 16:55:58\ntype: \"categories\"\n---\n","updated":"2018-07-29T09:14:08.297Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjkgs2ncx00031guoglkdqw6u","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-07-29T08:55:41.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-07-29 16:55:41\ntype: \"tags\"\n---\n","updated":"2018-07-29T09:13:52.109Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjkgs2ncx00071guoltfj57dd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"我是一个CPU","date":"2018-07-18T09:33:32.000Z","_content":"\n> 本文系转载。本文用形象生动的语言，和人类世界时间的类比，来分析在CPU眼里，其他的东西有多慢。对理解硬件和OS的层层CACHE机制，会有帮助\n\n## 1. 简介\n经常听到有人说磁盘很慢、网络很卡，这都是站在人类的感知维度去表述的，比如拷贝一个文件到硬盘需要几分钟到几十分钟，够我去吃个饭啦；而从网络下载一部电影，有时候需要几个小时，我都可以睡一觉了。\n\n最为我们熟知的关于计算机不同组件速度差异的图表，是下面这种金字塔形式：越往上速度越快，容量越小，而价格越高。这张图只是给了我们一个直观地感觉，并没有对各个速度和性能做出量化的说明和解释。而实际上，不同层级之间的差异要比这张图大的多。这篇文章就让你站在 CPU 的角度看这个世界，说说到底它们有多慢。\n\n希望你看到看完这篇文章能明白两件事情：磁盘和网络真的很慢，性能优化是个复杂的系统性的活。\n\n注：所有的数据都是来自[这个地址](https://gist.github.com/hellerbarde/2843375)。所有的数据会因为机器配置不同，或者硬件的更新而有出入，但是不影响我们直觉的感受。如果对这些数据比较感兴趣，[这个网址](https://people.eecs.berkeley.edu/~rcs/research/interactive_latency.html)给出了不同年份一些指标的数值。\n\n## 2. 数据\n\n先来看看 CPU 的速度，就拿我的电脑来说，主频是 2.6G，也就是说每秒可以执行 2.6*10^9 个指令，每个指令只需要 0.38ns（现在很多个人计算机的主频要比这个高，配置比较高的能达到 3.0G+）。我们把这个时间当做基本单位 1s，因为 1s 大概是人类能感知的最小时间单位。\n\n一级缓存读取时间为 0.5ns，换算成人类时间大约是 1.3s，大约一次或者两次心跳的时间。这里能看出缓存的重要性，因为它的速度可以赶上 CPU，程序本身的 locality 特性加上指令层级上的优化，cache 访问的命中率很高，这最终能极大提高效率。\n\n分支预测错误需要耗时 5ns，换算成人类时间大约是 13s，这个就有点久了，所以你会看到很多文章分析如何优化代码来降低分支预测的几率，比如这个得分非常高的[stackoverflow问题](http://stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array)。\n\n二级缓存时间就比较久了，大约在 7ns，换算成人类时间大约是 18.2s，可以看到的是如果一级缓存没有命中，然后去二级缓存读取数据，时间差了一个数量级。\n\n> 小知识:\n为什么需要多层的 CPU 缓存呢？这篇文章通过一个[通俗易懂的例子](https://fgiesen.wordpress.com/2016/08/07/why-do-cpus-have-multiple-cache-levels/)给出了讲解。\n\n我们继续，互斥锁的加锁和解锁时间需要 25ns，换算成人类时间大约是 65s，首次达到了一分钟。并发编程中，我们经常听说锁是一个很耗时的东西，因为在微波炉里加热一个东西需要一分钟的话，你要在那傻傻地等蛮久了。\n\n然后就到了内存，每次内存寻址需要 100ns，换算成人类时间是 260s，也就是4分多钟，如果读一些不需要太多思考的文章，这么久能读完2-3千字（这个快阅读的时代，很少人在手机上能静心多这么字了）。看起来还不算坏，不多要从内存中读取一段数据需要的时间会更多。到了内存之后，时间就变了一个量级，CPU 和内存之间的速度瓶颈被称为[冯诺依曼瓶颈](https://en.wikipedia.org/wiki/Von_Neumann_architecture#Von_Neumann_bottleneck)。\n\n一次 CPU 上下文切换（系统调用）需要大约 1500ns，也就是 1.5us（这个数字参考了[这篇文章](http://blog.tsunanet.net/2010/11/how-long-does-it-take-to-make-context.html)，采用的是单核 CPU 线程平均时间），换算成人类时间大约是 65分钟，嗯，也就是一个小时。我们也知道上下文切换是很耗时的行为，毕竟每次浪费一个小时，也很让人有罪恶感的。上下文切换更恐怖的事情在于，这段时间里 CPU 没有做任何有用的计算，只是切换了两个不同进程的寄存器和内存状态；而且这个过程还破坏了缓存，让后续的计算更加耗时。\n\n在 1Gbps 的网络上传输 2K 的数据需要 20us，换算成人类时间是 14.4小时，这么久都能把《星球大战》六部曲看完了（甚至还加上吃饭撒尿的时间）！可以看到网络上非常少数据传输对于 CPU 来说，已经很漫长。而且这里的时间还是理论最大值，实际过程还要更慢一些。\n\nSSD 随机读取耗时为 150us，换算成人类时间大约是 4.5天。换句话说，SSD 读点数据，CPU 都能休假，报团参加周边游了。虽然我们知道 SSD 要比机械硬盘快很多，但是这个速度对于 CPU 来说也是像乌龟一样。I/O 设备从硬盘开始速度开始变得漫长，这个时候我们就想起内存的好处了。尽量减少 IO 设备的读写，把最常用的数据放到内存中作为缓存是所有程序的通识。像 memcached 和 redis 这样的高速缓存系统近几年的异军突起，就是解决了这里的问题。\n\n从内存中读取 1MB 的连续数据，耗时大约为 250us，换算成人类时间是 7.5天，这次假期升级到国庆七天国外游了。\n\n同一个数据中心网络上跑一个来回需要 0.5ms，换算成人类时间大约是 15天，也就是半个月的时间。如果你的程序有段代码需要和数据中心的其他服务器交互，在这段时间里 CPU 都已经狂做了半个月的运算。减少不同服务组件的网络请求，是性能优化的一大课题。\n\n从 SSD 读取 1MB 的顺序数据，大约需要 1ms，换算成人类时间是 1个月。也就是说 SSD 读一个普通的文件，如果要等你做完，CPU 一个月时间就荒废了。尽管如此，SSD 已经很快啦，不信你看下面机械磁盘的表现。\n\n磁盘寻址时间为 10ms，换算成人类时间是 10个月，刚好够人类创造一个新的生命了。如果 CPU 需要让磁盘泡杯咖啡，在它眼里，磁盘去生了个孩子，回来告诉它你让我泡的咖啡好了。机械硬盘使用 RPM(Revolutions Per Minute/每分钟转速) 来评估磁盘的性能：RPM 越大，平均寻址时间更短，磁盘性能越好。寻址只是把磁头移动到正确的磁道上，然后才能读取指定扇区的内容。换句话说，寻址虽然很浪费时间，但其实它并没有办任何的正事（读取磁盘内容）。\n\n从磁盘读取 1MB 连续数据需要 20ms，换算成人类时间是 20个月。IO 设备是计算机系统的瓶颈，希望读到这里你能更深切地理解这句话！如果还不理解，不妨想想你在网上买的东西，快递送了将近两年，你的心情是怎么样的。\n\n而从世界上不同城市网络上走一个来回，平均需要 150ms（参考世界各地 ping 报文的时间），换算成人类时间是 12.5年。不难理解，所有的程序和架构都会尽量避免不同城市甚至是跨国家的网络访问，CDN 就是这个问题的一个解决方案：让用户和最接近自己的服务器交互，从而减少网络上报文的传输时间。\n\n虚拟机重启一次大约要 4s 时间，换算成人类的时间是 3百多年。对于此，我想到了乔布斯要死命优化 Mac 系统开机启动时间的故事。如果机器能少重启而且每次启动能快一点，不仅能救人命，也能救 CPU 的命。\n\n物理服务器重启一次需要 5min，换算成人类时间是 2万5千年，快赶上人类的文明史了。5 分钟人类都要等一会了，更别提 CPU 了，所以没事不要乱重启服务器啊，分分钟终结一个文明的节奏。\n\n\n## 3. 参考资料\n\n- [What Every Programmer Should Know About Memory](https://www.akkadia.org/drepper/cpumemory.pdf)\n\n- [Getting Physical With Memory](http://duartes.org/gustavo/blog/post/getting-physical-with-memory/) \n","source":"_posts/i-am-a-cpu.md","raw":"---\ntitle: 我是一个CPU\ndate: 2018-07-18 17:33:32\ncategories: CPU\ntags: CPU\n---\n\n> 本文系转载。本文用形象生动的语言，和人类世界时间的类比，来分析在CPU眼里，其他的东西有多慢。对理解硬件和OS的层层CACHE机制，会有帮助\n\n## 1. 简介\n经常听到有人说磁盘很慢、网络很卡，这都是站在人类的感知维度去表述的，比如拷贝一个文件到硬盘需要几分钟到几十分钟，够我去吃个饭啦；而从网络下载一部电影，有时候需要几个小时，我都可以睡一觉了。\n\n最为我们熟知的关于计算机不同组件速度差异的图表，是下面这种金字塔形式：越往上速度越快，容量越小，而价格越高。这张图只是给了我们一个直观地感觉，并没有对各个速度和性能做出量化的说明和解释。而实际上，不同层级之间的差异要比这张图大的多。这篇文章就让你站在 CPU 的角度看这个世界，说说到底它们有多慢。\n\n希望你看到看完这篇文章能明白两件事情：磁盘和网络真的很慢，性能优化是个复杂的系统性的活。\n\n注：所有的数据都是来自[这个地址](https://gist.github.com/hellerbarde/2843375)。所有的数据会因为机器配置不同，或者硬件的更新而有出入，但是不影响我们直觉的感受。如果对这些数据比较感兴趣，[这个网址](https://people.eecs.berkeley.edu/~rcs/research/interactive_latency.html)给出了不同年份一些指标的数值。\n\n## 2. 数据\n\n先来看看 CPU 的速度，就拿我的电脑来说，主频是 2.6G，也就是说每秒可以执行 2.6*10^9 个指令，每个指令只需要 0.38ns（现在很多个人计算机的主频要比这个高，配置比较高的能达到 3.0G+）。我们把这个时间当做基本单位 1s，因为 1s 大概是人类能感知的最小时间单位。\n\n一级缓存读取时间为 0.5ns，换算成人类时间大约是 1.3s，大约一次或者两次心跳的时间。这里能看出缓存的重要性，因为它的速度可以赶上 CPU，程序本身的 locality 特性加上指令层级上的优化，cache 访问的命中率很高，这最终能极大提高效率。\n\n分支预测错误需要耗时 5ns，换算成人类时间大约是 13s，这个就有点久了，所以你会看到很多文章分析如何优化代码来降低分支预测的几率，比如这个得分非常高的[stackoverflow问题](http://stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array)。\n\n二级缓存时间就比较久了，大约在 7ns，换算成人类时间大约是 18.2s，可以看到的是如果一级缓存没有命中，然后去二级缓存读取数据，时间差了一个数量级。\n\n> 小知识:\n为什么需要多层的 CPU 缓存呢？这篇文章通过一个[通俗易懂的例子](https://fgiesen.wordpress.com/2016/08/07/why-do-cpus-have-multiple-cache-levels/)给出了讲解。\n\n我们继续，互斥锁的加锁和解锁时间需要 25ns，换算成人类时间大约是 65s，首次达到了一分钟。并发编程中，我们经常听说锁是一个很耗时的东西，因为在微波炉里加热一个东西需要一分钟的话，你要在那傻傻地等蛮久了。\n\n然后就到了内存，每次内存寻址需要 100ns，换算成人类时间是 260s，也就是4分多钟，如果读一些不需要太多思考的文章，这么久能读完2-3千字（这个快阅读的时代，很少人在手机上能静心多这么字了）。看起来还不算坏，不多要从内存中读取一段数据需要的时间会更多。到了内存之后，时间就变了一个量级，CPU 和内存之间的速度瓶颈被称为[冯诺依曼瓶颈](https://en.wikipedia.org/wiki/Von_Neumann_architecture#Von_Neumann_bottleneck)。\n\n一次 CPU 上下文切换（系统调用）需要大约 1500ns，也就是 1.5us（这个数字参考了[这篇文章](http://blog.tsunanet.net/2010/11/how-long-does-it-take-to-make-context.html)，采用的是单核 CPU 线程平均时间），换算成人类时间大约是 65分钟，嗯，也就是一个小时。我们也知道上下文切换是很耗时的行为，毕竟每次浪费一个小时，也很让人有罪恶感的。上下文切换更恐怖的事情在于，这段时间里 CPU 没有做任何有用的计算，只是切换了两个不同进程的寄存器和内存状态；而且这个过程还破坏了缓存，让后续的计算更加耗时。\n\n在 1Gbps 的网络上传输 2K 的数据需要 20us，换算成人类时间是 14.4小时，这么久都能把《星球大战》六部曲看完了（甚至还加上吃饭撒尿的时间）！可以看到网络上非常少数据传输对于 CPU 来说，已经很漫长。而且这里的时间还是理论最大值，实际过程还要更慢一些。\n\nSSD 随机读取耗时为 150us，换算成人类时间大约是 4.5天。换句话说，SSD 读点数据，CPU 都能休假，报团参加周边游了。虽然我们知道 SSD 要比机械硬盘快很多，但是这个速度对于 CPU 来说也是像乌龟一样。I/O 设备从硬盘开始速度开始变得漫长，这个时候我们就想起内存的好处了。尽量减少 IO 设备的读写，把最常用的数据放到内存中作为缓存是所有程序的通识。像 memcached 和 redis 这样的高速缓存系统近几年的异军突起，就是解决了这里的问题。\n\n从内存中读取 1MB 的连续数据，耗时大约为 250us，换算成人类时间是 7.5天，这次假期升级到国庆七天国外游了。\n\n同一个数据中心网络上跑一个来回需要 0.5ms，换算成人类时间大约是 15天，也就是半个月的时间。如果你的程序有段代码需要和数据中心的其他服务器交互，在这段时间里 CPU 都已经狂做了半个月的运算。减少不同服务组件的网络请求，是性能优化的一大课题。\n\n从 SSD 读取 1MB 的顺序数据，大约需要 1ms，换算成人类时间是 1个月。也就是说 SSD 读一个普通的文件，如果要等你做完，CPU 一个月时间就荒废了。尽管如此，SSD 已经很快啦，不信你看下面机械磁盘的表现。\n\n磁盘寻址时间为 10ms，换算成人类时间是 10个月，刚好够人类创造一个新的生命了。如果 CPU 需要让磁盘泡杯咖啡，在它眼里，磁盘去生了个孩子，回来告诉它你让我泡的咖啡好了。机械硬盘使用 RPM(Revolutions Per Minute/每分钟转速) 来评估磁盘的性能：RPM 越大，平均寻址时间更短，磁盘性能越好。寻址只是把磁头移动到正确的磁道上，然后才能读取指定扇区的内容。换句话说，寻址虽然很浪费时间，但其实它并没有办任何的正事（读取磁盘内容）。\n\n从磁盘读取 1MB 连续数据需要 20ms，换算成人类时间是 20个月。IO 设备是计算机系统的瓶颈，希望读到这里你能更深切地理解这句话！如果还不理解，不妨想想你在网上买的东西，快递送了将近两年，你的心情是怎么样的。\n\n而从世界上不同城市网络上走一个来回，平均需要 150ms（参考世界各地 ping 报文的时间），换算成人类时间是 12.5年。不难理解，所有的程序和架构都会尽量避免不同城市甚至是跨国家的网络访问，CDN 就是这个问题的一个解决方案：让用户和最接近自己的服务器交互，从而减少网络上报文的传输时间。\n\n虚拟机重启一次大约要 4s 时间，换算成人类的时间是 3百多年。对于此，我想到了乔布斯要死命优化 Mac 系统开机启动时间的故事。如果机器能少重启而且每次启动能快一点，不仅能救人命，也能救 CPU 的命。\n\n物理服务器重启一次需要 5min，换算成人类时间是 2万5千年，快赶上人类的文明史了。5 分钟人类都要等一会了，更别提 CPU 了，所以没事不要乱重启服务器啊，分分钟终结一个文明的节奏。\n\n\n## 3. 参考资料\n\n- [What Every Programmer Should Know About Memory](https://www.akkadia.org/drepper/cpumemory.pdf)\n\n- [Getting Physical With Memory](http://duartes.org/gustavo/blog/post/getting-physical-with-memory/) \n","slug":"i-am-a-cpu","published":1,"updated":"2018-07-29T10:10:15.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgs2ncx00001guorxtiuur7","content":"<blockquote>\n<p>本文系转载。本文用形象生动的语言，和人类世界时间的类比，来分析在CPU眼里，其他的东西有多慢。对理解硬件和OS的层层CACHE机制，会有帮助</p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p>经常听到有人说磁盘很慢、网络很卡，这都是站在人类的感知维度去表述的，比如拷贝一个文件到硬盘需要几分钟到几十分钟，够我去吃个饭啦；而从网络下载一部电影，有时候需要几个小时，我都可以睡一觉了。</p>\n<p>最为我们熟知的关于计算机不同组件速度差异的图表，是下面这种金字塔形式：越往上速度越快，容量越小，而价格越高。这张图只是给了我们一个直观地感觉，并没有对各个速度和性能做出量化的说明和解释。而实际上，不同层级之间的差异要比这张图大的多。这篇文章就让你站在 CPU 的角度看这个世界，说说到底它们有多慢。</p>\n<p>希望你看到看完这篇文章能明白两件事情：磁盘和网络真的很慢，性能优化是个复杂的系统性的活。</p>\n<p>注：所有的数据都是来自<a href=\"https://gist.github.com/hellerbarde/2843375\" target=\"_blank\" rel=\"noopener\">这个地址</a>。所有的数据会因为机器配置不同，或者硬件的更新而有出入，但是不影响我们直觉的感受。如果对这些数据比较感兴趣，<a href=\"https://people.eecs.berkeley.edu/~rcs/research/interactive_latency.html\" target=\"_blank\" rel=\"noopener\">这个网址</a>给出了不同年份一些指标的数值。</p>\n<h2 id=\"2-数据\"><a href=\"#2-数据\" class=\"headerlink\" title=\"2. 数据\"></a>2. 数据</h2><p>先来看看 CPU 的速度，就拿我的电脑来说，主频是 2.6G，也就是说每秒可以执行 2.6*10^9 个指令，每个指令只需要 0.38ns（现在很多个人计算机的主频要比这个高，配置比较高的能达到 3.0G+）。我们把这个时间当做基本单位 1s，因为 1s 大概是人类能感知的最小时间单位。</p>\n<p>一级缓存读取时间为 0.5ns，换算成人类时间大约是 1.3s，大约一次或者两次心跳的时间。这里能看出缓存的重要性，因为它的速度可以赶上 CPU，程序本身的 locality 特性加上指令层级上的优化，cache 访问的命中率很高，这最终能极大提高效率。</p>\n<p>分支预测错误需要耗时 5ns，换算成人类时间大约是 13s，这个就有点久了，所以你会看到很多文章分析如何优化代码来降低分支预测的几率，比如这个得分非常高的<a href=\"http://stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array\" target=\"_blank\" rel=\"noopener\">stackoverflow问题</a>。</p>\n<p>二级缓存时间就比较久了，大约在 7ns，换算成人类时间大约是 18.2s，可以看到的是如果一级缓存没有命中，然后去二级缓存读取数据，时间差了一个数量级。</p>\n<blockquote>\n<p>小知识:<br>为什么需要多层的 CPU 缓存呢？这篇文章通过一个<a href=\"https://fgiesen.wordpress.com/2016/08/07/why-do-cpus-have-multiple-cache-levels/\" target=\"_blank\" rel=\"noopener\">通俗易懂的例子</a>给出了讲解。</p>\n</blockquote>\n<p>我们继续，互斥锁的加锁和解锁时间需要 25ns，换算成人类时间大约是 65s，首次达到了一分钟。并发编程中，我们经常听说锁是一个很耗时的东西，因为在微波炉里加热一个东西需要一分钟的话，你要在那傻傻地等蛮久了。</p>\n<p>然后就到了内存，每次内存寻址需要 100ns，换算成人类时间是 260s，也就是4分多钟，如果读一些不需要太多思考的文章，这么久能读完2-3千字（这个快阅读的时代，很少人在手机上能静心多这么字了）。看起来还不算坏，不多要从内存中读取一段数据需要的时间会更多。到了内存之后，时间就变了一个量级，CPU 和内存之间的速度瓶颈被称为<a href=\"https://en.wikipedia.org/wiki/Von_Neumann_architecture#Von_Neumann_bottleneck\" target=\"_blank\" rel=\"noopener\">冯诺依曼瓶颈</a>。</p>\n<p>一次 CPU 上下文切换（系统调用）需要大约 1500ns，也就是 1.5us（这个数字参考了<a href=\"http://blog.tsunanet.net/2010/11/how-long-does-it-take-to-make-context.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>，采用的是单核 CPU 线程平均时间），换算成人类时间大约是 65分钟，嗯，也就是一个小时。我们也知道上下文切换是很耗时的行为，毕竟每次浪费一个小时，也很让人有罪恶感的。上下文切换更恐怖的事情在于，这段时间里 CPU 没有做任何有用的计算，只是切换了两个不同进程的寄存器和内存状态；而且这个过程还破坏了缓存，让后续的计算更加耗时。</p>\n<p>在 1Gbps 的网络上传输 2K 的数据需要 20us，换算成人类时间是 14.4小时，这么久都能把《星球大战》六部曲看完了（甚至还加上吃饭撒尿的时间）！可以看到网络上非常少数据传输对于 CPU 来说，已经很漫长。而且这里的时间还是理论最大值，实际过程还要更慢一些。</p>\n<p>SSD 随机读取耗时为 150us，换算成人类时间大约是 4.5天。换句话说，SSD 读点数据，CPU 都能休假，报团参加周边游了。虽然我们知道 SSD 要比机械硬盘快很多，但是这个速度对于 CPU 来说也是像乌龟一样。I/O 设备从硬盘开始速度开始变得漫长，这个时候我们就想起内存的好处了。尽量减少 IO 设备的读写，把最常用的数据放到内存中作为缓存是所有程序的通识。像 memcached 和 redis 这样的高速缓存系统近几年的异军突起，就是解决了这里的问题。</p>\n<p>从内存中读取 1MB 的连续数据，耗时大约为 250us，换算成人类时间是 7.5天，这次假期升级到国庆七天国外游了。</p>\n<p>同一个数据中心网络上跑一个来回需要 0.5ms，换算成人类时间大约是 15天，也就是半个月的时间。如果你的程序有段代码需要和数据中心的其他服务器交互，在这段时间里 CPU 都已经狂做了半个月的运算。减少不同服务组件的网络请求，是性能优化的一大课题。</p>\n<p>从 SSD 读取 1MB 的顺序数据，大约需要 1ms，换算成人类时间是 1个月。也就是说 SSD 读一个普通的文件，如果要等你做完，CPU 一个月时间就荒废了。尽管如此，SSD 已经很快啦，不信你看下面机械磁盘的表现。</p>\n<p>磁盘寻址时间为 10ms，换算成人类时间是 10个月，刚好够人类创造一个新的生命了。如果 CPU 需要让磁盘泡杯咖啡，在它眼里，磁盘去生了个孩子，回来告诉它你让我泡的咖啡好了。机械硬盘使用 RPM(Revolutions Per Minute/每分钟转速) 来评估磁盘的性能：RPM 越大，平均寻址时间更短，磁盘性能越好。寻址只是把磁头移动到正确的磁道上，然后才能读取指定扇区的内容。换句话说，寻址虽然很浪费时间，但其实它并没有办任何的正事（读取磁盘内容）。</p>\n<p>从磁盘读取 1MB 连续数据需要 20ms，换算成人类时间是 20个月。IO 设备是计算机系统的瓶颈，希望读到这里你能更深切地理解这句话！如果还不理解，不妨想想你在网上买的东西，快递送了将近两年，你的心情是怎么样的。</p>\n<p>而从世界上不同城市网络上走一个来回，平均需要 150ms（参考世界各地 ping 报文的时间），换算成人类时间是 12.5年。不难理解，所有的程序和架构都会尽量避免不同城市甚至是跨国家的网络访问，CDN 就是这个问题的一个解决方案：让用户和最接近自己的服务器交互，从而减少网络上报文的传输时间。</p>\n<p>虚拟机重启一次大约要 4s 时间，换算成人类的时间是 3百多年。对于此，我想到了乔布斯要死命优化 Mac 系统开机启动时间的故事。如果机器能少重启而且每次启动能快一点，不仅能救人命，也能救 CPU 的命。</p>\n<p>物理服务器重启一次需要 5min，换算成人类时间是 2万5千年，快赶上人类的文明史了。5 分钟人类都要等一会了，更别提 CPU 了，所以没事不要乱重启服务器啊，分分钟终结一个文明的节奏。</p>\n<h2 id=\"3-参考资料\"><a href=\"#3-参考资料\" class=\"headerlink\" title=\"3. 参考资料\"></a>3. 参考资料</h2><ul>\n<li><p><a href=\"https://www.akkadia.org/drepper/cpumemory.pdf\" target=\"_blank\" rel=\"noopener\">What Every Programmer Should Know About Memory</a></p>\n</li>\n<li><p><a href=\"http://duartes.org/gustavo/blog/post/getting-physical-with-memory/\" target=\"_blank\" rel=\"noopener\">Getting Physical With Memory</a> </p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文系转载。本文用形象生动的语言，和人类世界时间的类比，来分析在CPU眼里，其他的东西有多慢。对理解硬件和OS的层层CACHE机制，会有帮助</p>\n</blockquote>\n<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p>经常听到有人说磁盘很慢、网络很卡，这都是站在人类的感知维度去表述的，比如拷贝一个文件到硬盘需要几分钟到几十分钟，够我去吃个饭啦；而从网络下载一部电影，有时候需要几个小时，我都可以睡一觉了。</p>\n<p>最为我们熟知的关于计算机不同组件速度差异的图表，是下面这种金字塔形式：越往上速度越快，容量越小，而价格越高。这张图只是给了我们一个直观地感觉，并没有对各个速度和性能做出量化的说明和解释。而实际上，不同层级之间的差异要比这张图大的多。这篇文章就让你站在 CPU 的角度看这个世界，说说到底它们有多慢。</p>\n<p>希望你看到看完这篇文章能明白两件事情：磁盘和网络真的很慢，性能优化是个复杂的系统性的活。</p>\n<p>注：所有的数据都是来自<a href=\"https://gist.github.com/hellerbarde/2843375\" target=\"_blank\" rel=\"noopener\">这个地址</a>。所有的数据会因为机器配置不同，或者硬件的更新而有出入，但是不影响我们直觉的感受。如果对这些数据比较感兴趣，<a href=\"https://people.eecs.berkeley.edu/~rcs/research/interactive_latency.html\" target=\"_blank\" rel=\"noopener\">这个网址</a>给出了不同年份一些指标的数值。</p>\n<h2 id=\"2-数据\"><a href=\"#2-数据\" class=\"headerlink\" title=\"2. 数据\"></a>2. 数据</h2><p>先来看看 CPU 的速度，就拿我的电脑来说，主频是 2.6G，也就是说每秒可以执行 2.6*10^9 个指令，每个指令只需要 0.38ns（现在很多个人计算机的主频要比这个高，配置比较高的能达到 3.0G+）。我们把这个时间当做基本单位 1s，因为 1s 大概是人类能感知的最小时间单位。</p>\n<p>一级缓存读取时间为 0.5ns，换算成人类时间大约是 1.3s，大约一次或者两次心跳的时间。这里能看出缓存的重要性，因为它的速度可以赶上 CPU，程序本身的 locality 特性加上指令层级上的优化，cache 访问的命中率很高，这最终能极大提高效率。</p>\n<p>分支预测错误需要耗时 5ns，换算成人类时间大约是 13s，这个就有点久了，所以你会看到很多文章分析如何优化代码来降低分支预测的几率，比如这个得分非常高的<a href=\"http://stackoverflow.com/questions/11227809/why-is-it-faster-to-process-a-sorted-array-than-an-unsorted-array\" target=\"_blank\" rel=\"noopener\">stackoverflow问题</a>。</p>\n<p>二级缓存时间就比较久了，大约在 7ns，换算成人类时间大约是 18.2s，可以看到的是如果一级缓存没有命中，然后去二级缓存读取数据，时间差了一个数量级。</p>\n<blockquote>\n<p>小知识:<br>为什么需要多层的 CPU 缓存呢？这篇文章通过一个<a href=\"https://fgiesen.wordpress.com/2016/08/07/why-do-cpus-have-multiple-cache-levels/\" target=\"_blank\" rel=\"noopener\">通俗易懂的例子</a>给出了讲解。</p>\n</blockquote>\n<p>我们继续，互斥锁的加锁和解锁时间需要 25ns，换算成人类时间大约是 65s，首次达到了一分钟。并发编程中，我们经常听说锁是一个很耗时的东西，因为在微波炉里加热一个东西需要一分钟的话，你要在那傻傻地等蛮久了。</p>\n<p>然后就到了内存，每次内存寻址需要 100ns，换算成人类时间是 260s，也就是4分多钟，如果读一些不需要太多思考的文章，这么久能读完2-3千字（这个快阅读的时代，很少人在手机上能静心多这么字了）。看起来还不算坏，不多要从内存中读取一段数据需要的时间会更多。到了内存之后，时间就变了一个量级，CPU 和内存之间的速度瓶颈被称为<a href=\"https://en.wikipedia.org/wiki/Von_Neumann_architecture#Von_Neumann_bottleneck\" target=\"_blank\" rel=\"noopener\">冯诺依曼瓶颈</a>。</p>\n<p>一次 CPU 上下文切换（系统调用）需要大约 1500ns，也就是 1.5us（这个数字参考了<a href=\"http://blog.tsunanet.net/2010/11/how-long-does-it-take-to-make-context.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>，采用的是单核 CPU 线程平均时间），换算成人类时间大约是 65分钟，嗯，也就是一个小时。我们也知道上下文切换是很耗时的行为，毕竟每次浪费一个小时，也很让人有罪恶感的。上下文切换更恐怖的事情在于，这段时间里 CPU 没有做任何有用的计算，只是切换了两个不同进程的寄存器和内存状态；而且这个过程还破坏了缓存，让后续的计算更加耗时。</p>\n<p>在 1Gbps 的网络上传输 2K 的数据需要 20us，换算成人类时间是 14.4小时，这么久都能把《星球大战》六部曲看完了（甚至还加上吃饭撒尿的时间）！可以看到网络上非常少数据传输对于 CPU 来说，已经很漫长。而且这里的时间还是理论最大值，实际过程还要更慢一些。</p>\n<p>SSD 随机读取耗时为 150us，换算成人类时间大约是 4.5天。换句话说，SSD 读点数据，CPU 都能休假，报团参加周边游了。虽然我们知道 SSD 要比机械硬盘快很多，但是这个速度对于 CPU 来说也是像乌龟一样。I/O 设备从硬盘开始速度开始变得漫长，这个时候我们就想起内存的好处了。尽量减少 IO 设备的读写，把最常用的数据放到内存中作为缓存是所有程序的通识。像 memcached 和 redis 这样的高速缓存系统近几年的异军突起，就是解决了这里的问题。</p>\n<p>从内存中读取 1MB 的连续数据，耗时大约为 250us，换算成人类时间是 7.5天，这次假期升级到国庆七天国外游了。</p>\n<p>同一个数据中心网络上跑一个来回需要 0.5ms，换算成人类时间大约是 15天，也就是半个月的时间。如果你的程序有段代码需要和数据中心的其他服务器交互，在这段时间里 CPU 都已经狂做了半个月的运算。减少不同服务组件的网络请求，是性能优化的一大课题。</p>\n<p>从 SSD 读取 1MB 的顺序数据，大约需要 1ms，换算成人类时间是 1个月。也就是说 SSD 读一个普通的文件，如果要等你做完，CPU 一个月时间就荒废了。尽管如此，SSD 已经很快啦，不信你看下面机械磁盘的表现。</p>\n<p>磁盘寻址时间为 10ms，换算成人类时间是 10个月，刚好够人类创造一个新的生命了。如果 CPU 需要让磁盘泡杯咖啡，在它眼里，磁盘去生了个孩子，回来告诉它你让我泡的咖啡好了。机械硬盘使用 RPM(Revolutions Per Minute/每分钟转速) 来评估磁盘的性能：RPM 越大，平均寻址时间更短，磁盘性能越好。寻址只是把磁头移动到正确的磁道上，然后才能读取指定扇区的内容。换句话说，寻址虽然很浪费时间，但其实它并没有办任何的正事（读取磁盘内容）。</p>\n<p>从磁盘读取 1MB 连续数据需要 20ms，换算成人类时间是 20个月。IO 设备是计算机系统的瓶颈，希望读到这里你能更深切地理解这句话！如果还不理解，不妨想想你在网上买的东西，快递送了将近两年，你的心情是怎么样的。</p>\n<p>而从世界上不同城市网络上走一个来回，平均需要 150ms（参考世界各地 ping 报文的时间），换算成人类时间是 12.5年。不难理解，所有的程序和架构都会尽量避免不同城市甚至是跨国家的网络访问，CDN 就是这个问题的一个解决方案：让用户和最接近自己的服务器交互，从而减少网络上报文的传输时间。</p>\n<p>虚拟机重启一次大约要 4s 时间，换算成人类的时间是 3百多年。对于此，我想到了乔布斯要死命优化 Mac 系统开机启动时间的故事。如果机器能少重启而且每次启动能快一点，不仅能救人命，也能救 CPU 的命。</p>\n<p>物理服务器重启一次需要 5min，换算成人类时间是 2万5千年，快赶上人类的文明史了。5 分钟人类都要等一会了，更别提 CPU 了，所以没事不要乱重启服务器啊，分分钟终结一个文明的节奏。</p>\n<h2 id=\"3-参考资料\"><a href=\"#3-参考资料\" class=\"headerlink\" title=\"3. 参考资料\"></a>3. 参考资料</h2><ul>\n<li><p><a href=\"https://www.akkadia.org/drepper/cpumemory.pdf\" target=\"_blank\" rel=\"noopener\">What Every Programmer Should Know About Memory</a></p>\n</li>\n<li><p><a href=\"http://duartes.org/gustavo/blog/post/getting-physical-with-memory/\" target=\"_blank\" rel=\"noopener\">Getting Physical With Memory</a> </p>\n</li>\n</ul>\n"},{"title":"Linux shell标准输入/输出/错误重定向","date":"2018-07-16T11:32:11.000Z","_content":"\n\n## 1. 什么是文件描述符\n&emsp;&emsp;文件描述符即file descriptor，是内核为了高效管理已经被打开的文件所创建的索引。它是一个非负整数，用于指被打开的文件。所有执行I/O操作的系统调用都是通过文件描述符。\n\n&emsp;&emsp;程序刚刚启动时，默认分配文件描述符0为标准输入、1为标准输出、2为标准错误。\n\n## 2. 文件重定向\n### 2.1 标准输出重定向\n&emsp;&emsp;标准输出重定向，使用符号“>”,它表示程序输出至文件。该符号右侧文件若存在，则清空文件中的内容，并将新的内容输入至该文件；该符号右侧文件若存在，则首先创建该文件，并将新的内容输入至该文件。\n\n&emsp;&emsp;而重定向符号“>>”则表示追加的意思。\n\n&emsp;&emsp;值得注意的是，“>file”其实是\"1>file\"的效果。\n### 2.2 标准错误重定向\n&emsp;&emsp;标准错误重定向跟标准输出重定向其实是类似的，只是重定向符号前面的文件描述符（2）不能省略，即：2>file\n### 2.3 标准输入重定向\n&emsp;&emsp;使用符号“<”。举个简单的例子，就知道怎么用了。\n\n&emsp;&emsp;假设当前路径下有两个文件：file1、file2。其中，file1中为空，file2中有内容：stdin test。\n\n&emsp;&emsp;在shell下输入命令：cat >file1，则shell会等待用户输入内容，该内容会输入file1中。但是如果在shell下输入命令：cat >file1 <file2,则shell将file2中的内容输入进file1中。\n## 3. 高级用法\n### 3.1 “>/dev/null 2>&1”是啥意思\n&emsp;&emsp;将标准输出重定向到设备/dev/null中，并且标准错误“像标准输出一样”重定向到/dev/null中。\n### 3.2 “>/dev/null 2>1”是啥意思\n&emsp;&emsp;将标准输出重定向到设备/dev/null中，将标准错误重定向到文件名为1的文件中。\n### 3.3 “>file 2>file1”和“>file 2>&1”有啥区别\n&emsp;&emsp;前者会打开两次文件file，这样stdout和stderr会互相覆盖，这样相当于使用了FD1和FD2两个同时去抢占file的管道；\n\n&emsp;&emsp;而后者中，stderr继承了FD1管道后，再被送往file，此时file只被打开一次，只使用了一个管道FD1，因此不存在覆盖的问题。\n### 3.4 “>file 2>&1”和“2>&1 >file”有啥区别\n&emsp;&emsp;如上分析，前一个命令表示：标准输入和标准错误通过同一个管道重定向到file中。\n\n&emsp;&emsp;后一个命令无法达到这种效果，应该2>&1是标准错误拷贝了标准输出的行为，但此时标准输出还是在终端，>file后才被重定向到file，所以其标准错误最终仍然保持在终端。\n\n","source":"_posts/input_output_error.md","raw":"---\ntitle: Linux shell标准输入/输出/错误重定向\ndate: 2018-07-16 19:32:11\ncategories: Shell\ntags: Shell\n---\n\n\n## 1. 什么是文件描述符\n&emsp;&emsp;文件描述符即file descriptor，是内核为了高效管理已经被打开的文件所创建的索引。它是一个非负整数，用于指被打开的文件。所有执行I/O操作的系统调用都是通过文件描述符。\n\n&emsp;&emsp;程序刚刚启动时，默认分配文件描述符0为标准输入、1为标准输出、2为标准错误。\n\n## 2. 文件重定向\n### 2.1 标准输出重定向\n&emsp;&emsp;标准输出重定向，使用符号“>”,它表示程序输出至文件。该符号右侧文件若存在，则清空文件中的内容，并将新的内容输入至该文件；该符号右侧文件若存在，则首先创建该文件，并将新的内容输入至该文件。\n\n&emsp;&emsp;而重定向符号“>>”则表示追加的意思。\n\n&emsp;&emsp;值得注意的是，“>file”其实是\"1>file\"的效果。\n### 2.2 标准错误重定向\n&emsp;&emsp;标准错误重定向跟标准输出重定向其实是类似的，只是重定向符号前面的文件描述符（2）不能省略，即：2>file\n### 2.3 标准输入重定向\n&emsp;&emsp;使用符号“<”。举个简单的例子，就知道怎么用了。\n\n&emsp;&emsp;假设当前路径下有两个文件：file1、file2。其中，file1中为空，file2中有内容：stdin test。\n\n&emsp;&emsp;在shell下输入命令：cat >file1，则shell会等待用户输入内容，该内容会输入file1中。但是如果在shell下输入命令：cat >file1 <file2,则shell将file2中的内容输入进file1中。\n## 3. 高级用法\n### 3.1 “>/dev/null 2>&1”是啥意思\n&emsp;&emsp;将标准输出重定向到设备/dev/null中，并且标准错误“像标准输出一样”重定向到/dev/null中。\n### 3.2 “>/dev/null 2>1”是啥意思\n&emsp;&emsp;将标准输出重定向到设备/dev/null中，将标准错误重定向到文件名为1的文件中。\n### 3.3 “>file 2>file1”和“>file 2>&1”有啥区别\n&emsp;&emsp;前者会打开两次文件file，这样stdout和stderr会互相覆盖，这样相当于使用了FD1和FD2两个同时去抢占file的管道；\n\n&emsp;&emsp;而后者中，stderr继承了FD1管道后，再被送往file，此时file只被打开一次，只使用了一个管道FD1，因此不存在覆盖的问题。\n### 3.4 “>file 2>&1”和“2>&1 >file”有啥区别\n&emsp;&emsp;如上分析，前一个命令表示：标准输入和标准错误通过同一个管道重定向到file中。\n\n&emsp;&emsp;后一个命令无法达到这种效果，应该2>&1是标准错误拷贝了标准输出的行为，但此时标准输出还是在终端，>file后才被重定向到file，所以其标准错误最终仍然保持在终端。\n\n","slug":"input_output_error","published":1,"updated":"2018-07-29T09:27:45.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgs2ncx00021guozaxv0hqp","content":"<h2 id=\"1-什么是文件描述符\"><a href=\"#1-什么是文件描述符\" class=\"headerlink\" title=\"1. 什么是文件描述符\"></a>1. 什么是文件描述符</h2><p>&emsp;&emsp;文件描述符即file descriptor，是内核为了高效管理已经被打开的文件所创建的索引。它是一个非负整数，用于指被打开的文件。所有执行I/O操作的系统调用都是通过文件描述符。</p>\n<p>&emsp;&emsp;程序刚刚启动时，默认分配文件描述符0为标准输入、1为标准输出、2为标准错误。</p>\n<h2 id=\"2-文件重定向\"><a href=\"#2-文件重定向\" class=\"headerlink\" title=\"2. 文件重定向\"></a>2. 文件重定向</h2><h3 id=\"2-1-标准输出重定向\"><a href=\"#2-1-标准输出重定向\" class=\"headerlink\" title=\"2.1 标准输出重定向\"></a>2.1 标准输出重定向</h3><p>&emsp;&emsp;标准输出重定向，使用符号“&gt;”,它表示程序输出至文件。该符号右侧文件若存在，则清空文件中的内容，并将新的内容输入至该文件；该符号右侧文件若存在，则首先创建该文件，并将新的内容输入至该文件。</p>\n<p>&emsp;&emsp;而重定向符号“&gt;&gt;”则表示追加的意思。</p>\n<p>&emsp;&emsp;值得注意的是，“&gt;file”其实是”1&gt;file”的效果。</p>\n<h3 id=\"2-2-标准错误重定向\"><a href=\"#2-2-标准错误重定向\" class=\"headerlink\" title=\"2.2 标准错误重定向\"></a>2.2 标准错误重定向</h3><p>&emsp;&emsp;标准错误重定向跟标准输出重定向其实是类似的，只是重定向符号前面的文件描述符（2）不能省略，即：2&gt;file</p>\n<h3 id=\"2-3-标准输入重定向\"><a href=\"#2-3-标准输入重定向\" class=\"headerlink\" title=\"2.3 标准输入重定向\"></a>2.3 标准输入重定向</h3><p>&emsp;&emsp;使用符号“&lt;”。举个简单的例子，就知道怎么用了。</p>\n<p>&emsp;&emsp;假设当前路径下有两个文件：file1、file2。其中，file1中为空，file2中有内容：stdin test。</p>\n<p>&emsp;&emsp;在shell下输入命令：cat &gt;file1，则shell会等待用户输入内容，该内容会输入file1中。但是如果在shell下输入命令：cat &gt;file1 &lt;file2,则shell将file2中的内容输入进file1中。</p>\n<h2 id=\"3-高级用法\"><a href=\"#3-高级用法\" class=\"headerlink\" title=\"3. 高级用法\"></a>3. 高级用法</h2><h3 id=\"3-1-“-gt-dev-null-2-gt-amp-1”是啥意思\"><a href=\"#3-1-“-gt-dev-null-2-gt-amp-1”是啥意思\" class=\"headerlink\" title=\"3.1 “&gt;/dev/null 2&gt;&amp;1”是啥意思\"></a>3.1 “&gt;/dev/null 2&gt;&amp;1”是啥意思</h3><p>&emsp;&emsp;将标准输出重定向到设备/dev/null中，并且标准错误“像标准输出一样”重定向到/dev/null中。</p>\n<h3 id=\"3-2-“-gt-dev-null-2-gt-1”是啥意思\"><a href=\"#3-2-“-gt-dev-null-2-gt-1”是啥意思\" class=\"headerlink\" title=\"3.2 “&gt;/dev/null 2&gt;1”是啥意思\"></a>3.2 “&gt;/dev/null 2&gt;1”是啥意思</h3><p>&emsp;&emsp;将标准输出重定向到设备/dev/null中，将标准错误重定向到文件名为1的文件中。</p>\n<h3 id=\"3-3-“-gt-file-2-gt-file1”和“-gt-file-2-gt-amp-1”有啥区别\"><a href=\"#3-3-“-gt-file-2-gt-file1”和“-gt-file-2-gt-amp-1”有啥区别\" class=\"headerlink\" title=\"3.3 “&gt;file 2&gt;file1”和“&gt;file 2&gt;&amp;1”有啥区别\"></a>3.3 “&gt;file 2&gt;file1”和“&gt;file 2&gt;&amp;1”有啥区别</h3><p>&emsp;&emsp;前者会打开两次文件file，这样stdout和stderr会互相覆盖，这样相当于使用了FD1和FD2两个同时去抢占file的管道；</p>\n<p>&emsp;&emsp;而后者中，stderr继承了FD1管道后，再被送往file，此时file只被打开一次，只使用了一个管道FD1，因此不存在覆盖的问题。</p>\n<h3 id=\"3-4-“-gt-file-2-gt-amp-1”和“2-gt-amp-1-gt-file”有啥区别\"><a href=\"#3-4-“-gt-file-2-gt-amp-1”和“2-gt-amp-1-gt-file”有啥区别\" class=\"headerlink\" title=\"3.4 “&gt;file 2&gt;&amp;1”和“2&gt;&amp;1 &gt;file”有啥区别\"></a>3.4 “&gt;file 2&gt;&amp;1”和“2&gt;&amp;1 &gt;file”有啥区别</h3><p>&emsp;&emsp;如上分析，前一个命令表示：标准输入和标准错误通过同一个管道重定向到file中。</p>\n<p>&emsp;&emsp;后一个命令无法达到这种效果，应该2&gt;&amp;1是标准错误拷贝了标准输出的行为，但此时标准输出还是在终端，&gt;file后才被重定向到file，所以其标准错误最终仍然保持在终端。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-什么是文件描述符\"><a href=\"#1-什么是文件描述符\" class=\"headerlink\" title=\"1. 什么是文件描述符\"></a>1. 什么是文件描述符</h2><p>&emsp;&emsp;文件描述符即file descriptor，是内核为了高效管理已经被打开的文件所创建的索引。它是一个非负整数，用于指被打开的文件。所有执行I/O操作的系统调用都是通过文件描述符。</p>\n<p>&emsp;&emsp;程序刚刚启动时，默认分配文件描述符0为标准输入、1为标准输出、2为标准错误。</p>\n<h2 id=\"2-文件重定向\"><a href=\"#2-文件重定向\" class=\"headerlink\" title=\"2. 文件重定向\"></a>2. 文件重定向</h2><h3 id=\"2-1-标准输出重定向\"><a href=\"#2-1-标准输出重定向\" class=\"headerlink\" title=\"2.1 标准输出重定向\"></a>2.1 标准输出重定向</h3><p>&emsp;&emsp;标准输出重定向，使用符号“&gt;”,它表示程序输出至文件。该符号右侧文件若存在，则清空文件中的内容，并将新的内容输入至该文件；该符号右侧文件若存在，则首先创建该文件，并将新的内容输入至该文件。</p>\n<p>&emsp;&emsp;而重定向符号“&gt;&gt;”则表示追加的意思。</p>\n<p>&emsp;&emsp;值得注意的是，“&gt;file”其实是”1&gt;file”的效果。</p>\n<h3 id=\"2-2-标准错误重定向\"><a href=\"#2-2-标准错误重定向\" class=\"headerlink\" title=\"2.2 标准错误重定向\"></a>2.2 标准错误重定向</h3><p>&emsp;&emsp;标准错误重定向跟标准输出重定向其实是类似的，只是重定向符号前面的文件描述符（2）不能省略，即：2&gt;file</p>\n<h3 id=\"2-3-标准输入重定向\"><a href=\"#2-3-标准输入重定向\" class=\"headerlink\" title=\"2.3 标准输入重定向\"></a>2.3 标准输入重定向</h3><p>&emsp;&emsp;使用符号“&lt;”。举个简单的例子，就知道怎么用了。</p>\n<p>&emsp;&emsp;假设当前路径下有两个文件：file1、file2。其中，file1中为空，file2中有内容：stdin test。</p>\n<p>&emsp;&emsp;在shell下输入命令：cat &gt;file1，则shell会等待用户输入内容，该内容会输入file1中。但是如果在shell下输入命令：cat &gt;file1 &lt;file2,则shell将file2中的内容输入进file1中。</p>\n<h2 id=\"3-高级用法\"><a href=\"#3-高级用法\" class=\"headerlink\" title=\"3. 高级用法\"></a>3. 高级用法</h2><h3 id=\"3-1-“-gt-dev-null-2-gt-amp-1”是啥意思\"><a href=\"#3-1-“-gt-dev-null-2-gt-amp-1”是啥意思\" class=\"headerlink\" title=\"3.1 “&gt;/dev/null 2&gt;&amp;1”是啥意思\"></a>3.1 “&gt;/dev/null 2&gt;&amp;1”是啥意思</h3><p>&emsp;&emsp;将标准输出重定向到设备/dev/null中，并且标准错误“像标准输出一样”重定向到/dev/null中。</p>\n<h3 id=\"3-2-“-gt-dev-null-2-gt-1”是啥意思\"><a href=\"#3-2-“-gt-dev-null-2-gt-1”是啥意思\" class=\"headerlink\" title=\"3.2 “&gt;/dev/null 2&gt;1”是啥意思\"></a>3.2 “&gt;/dev/null 2&gt;1”是啥意思</h3><p>&emsp;&emsp;将标准输出重定向到设备/dev/null中，将标准错误重定向到文件名为1的文件中。</p>\n<h3 id=\"3-3-“-gt-file-2-gt-file1”和“-gt-file-2-gt-amp-1”有啥区别\"><a href=\"#3-3-“-gt-file-2-gt-file1”和“-gt-file-2-gt-amp-1”有啥区别\" class=\"headerlink\" title=\"3.3 “&gt;file 2&gt;file1”和“&gt;file 2&gt;&amp;1”有啥区别\"></a>3.3 “&gt;file 2&gt;file1”和“&gt;file 2&gt;&amp;1”有啥区别</h3><p>&emsp;&emsp;前者会打开两次文件file，这样stdout和stderr会互相覆盖，这样相当于使用了FD1和FD2两个同时去抢占file的管道；</p>\n<p>&emsp;&emsp;而后者中，stderr继承了FD1管道后，再被送往file，此时file只被打开一次，只使用了一个管道FD1，因此不存在覆盖的问题。</p>\n<h3 id=\"3-4-“-gt-file-2-gt-amp-1”和“2-gt-amp-1-gt-file”有啥区别\"><a href=\"#3-4-“-gt-file-2-gt-amp-1”和“2-gt-amp-1-gt-file”有啥区别\" class=\"headerlink\" title=\"3.4 “&gt;file 2&gt;&amp;1”和“2&gt;&amp;1 &gt;file”有啥区别\"></a>3.4 “&gt;file 2&gt;&amp;1”和“2&gt;&amp;1 &gt;file”有啥区别</h3><p>&emsp;&emsp;如上分析，前一个命令表示：标准输入和标准错误通过同一个管道重定向到file中。</p>\n<p>&emsp;&emsp;后一个命令无法达到这种效果，应该2&gt;&amp;1是标准错误拷贝了标准输出的行为，但此时标准输出还是在终端，&gt;file后才被重定向到file，所以其标准错误最终仍然保持在终端。</p>\n"},{"title":"简析linux启动流程","date":"2018-07-18T10:13:48.000Z","_content":"\n\n本文以x86 PC为例，简要介绍linux启动流程。\n## 1. 硬件启动流程\n当PC上电后，需要根据PC寄存器的值进行取值执行。那么上电后PC寄存器的值会是多少呢？答案是BIOS映射区。\n\nBIOS即基本输入输出系统，主要完成两部分工作：<br />\n- POST，即上电自检。初始化硬件设备，并检查系统外围主要设备，如内存、键盘、显示器、软硬磁盘等；<br />\n- 确定启动设备。根据设置的启动顺序，检测驱动器，将磁盘的0磁道0扇区扇区拷贝（512B）到内存（该扇区即引导扇区，其中存放的是MBR即主引导记录）。然后将控制权转交给MBR中的Bootloader。\n> 其中磁盘0磁道0扇区即引导扇区，其中存放的是MBR即主引导扇区。其中主要包含两部分内容：\n> + Bootloader的stage1\n> + 硬盘分区表DDT和魔数\n\n## 2. GRUB启动引导\n这部分的启动主要分为三个阶段：stage1、stage1.5、stage2。\n\n**1. stage1**\n\n如上述介绍，这部分代码存放于MBR中，其重要作用是启动装载stage2。\n\n**2. stage1.5**\n\n这部分代码存放在MBR后面的分区。它能识别启动分区文件系统，是stage1和stage2的桥梁，访问/boot分区grub目录下的stage2文件，并载入内存。\n\n**3 stage2**\n\n这部分启动代码的主要作用为：\n- 能够解析grub的配置文件，位于/boot分区下的/grub/grub.conf\n- 显示操作系统的启动菜单\n- 加载内核镜像到北村\n- 通过/boot/initrd开头文件建立虚拟操作系统\n- 将控制权转交给内核\n\n## 3. 内核引导阶段\n经过上述过程后开始进入内核引导阶段：\n- 调用虚拟文件系统中的init\n- 加载驱动模块，初始化并配置系统中的歌模块\n- 加载并切换真正的文件系统\n- 协助内核呼叫进程/sbin/init程序\n---\n经历上上述各阶段启动和引导后，开始进行系统初始化和启动终端，整个linux系统完成启动。\n","source":"_posts/linux-boot.md","raw":"---\ntitle: 简析linux启动流程\ndate: 2018-07-18 18:13:48\ncategories: Linux\ntags: bootup\n---\n\n\n本文以x86 PC为例，简要介绍linux启动流程。\n## 1. 硬件启动流程\n当PC上电后，需要根据PC寄存器的值进行取值执行。那么上电后PC寄存器的值会是多少呢？答案是BIOS映射区。\n\nBIOS即基本输入输出系统，主要完成两部分工作：<br />\n- POST，即上电自检。初始化硬件设备，并检查系统外围主要设备，如内存、键盘、显示器、软硬磁盘等；<br />\n- 确定启动设备。根据设置的启动顺序，检测驱动器，将磁盘的0磁道0扇区扇区拷贝（512B）到内存（该扇区即引导扇区，其中存放的是MBR即主引导记录）。然后将控制权转交给MBR中的Bootloader。\n> 其中磁盘0磁道0扇区即引导扇区，其中存放的是MBR即主引导扇区。其中主要包含两部分内容：\n> + Bootloader的stage1\n> + 硬盘分区表DDT和魔数\n\n## 2. GRUB启动引导\n这部分的启动主要分为三个阶段：stage1、stage1.5、stage2。\n\n**1. stage1**\n\n如上述介绍，这部分代码存放于MBR中，其重要作用是启动装载stage2。\n\n**2. stage1.5**\n\n这部分代码存放在MBR后面的分区。它能识别启动分区文件系统，是stage1和stage2的桥梁，访问/boot分区grub目录下的stage2文件，并载入内存。\n\n**3 stage2**\n\n这部分启动代码的主要作用为：\n- 能够解析grub的配置文件，位于/boot分区下的/grub/grub.conf\n- 显示操作系统的启动菜单\n- 加载内核镜像到北村\n- 通过/boot/initrd开头文件建立虚拟操作系统\n- 将控制权转交给内核\n\n## 3. 内核引导阶段\n经过上述过程后开始进入内核引导阶段：\n- 调用虚拟文件系统中的init\n- 加载驱动模块，初始化并配置系统中的歌模块\n- 加载并切换真正的文件系统\n- 协助内核呼叫进程/sbin/init程序\n---\n经历上上述各阶段启动和引导后，开始进行系统初始化和启动终端，整个linux系统完成启动。\n","slug":"linux-boot","published":1,"updated":"2018-07-29T10:16:30.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgs2ncx00061guo0wzxzfxf","content":"<p>本文以x86 PC为例，简要介绍linux启动流程。</p>\n<h2 id=\"1-硬件启动流程\"><a href=\"#1-硬件启动流程\" class=\"headerlink\" title=\"1. 硬件启动流程\"></a>1. 硬件启动流程</h2><p>当PC上电后，需要根据PC寄存器的值进行取值执行。那么上电后PC寄存器的值会是多少呢？答案是BIOS映射区。</p>\n<p>BIOS即基本输入输出系统，主要完成两部分工作：<br></p>\n<ul>\n<li>POST，即上电自检。初始化硬件设备，并检查系统外围主要设备，如内存、键盘、显示器、软硬磁盘等；<br></li>\n<li>确定启动设备。根据设置的启动顺序，检测驱动器，将磁盘的0磁道0扇区扇区拷贝（512B）到内存（该扇区即引导扇区，其中存放的是MBR即主引导记录）。然后将控制权转交给MBR中的Bootloader。<blockquote>\n<p>其中磁盘0磁道0扇区即引导扇区，其中存放的是MBR即主引导扇区。其中主要包含两部分内容：</p>\n<ul>\n<li>Bootloader的stage1</li>\n<li>硬盘分区表DDT和魔数</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"2-GRUB启动引导\"><a href=\"#2-GRUB启动引导\" class=\"headerlink\" title=\"2. GRUB启动引导\"></a>2. GRUB启动引导</h2><p>这部分的启动主要分为三个阶段：stage1、stage1.5、stage2。</p>\n<p><strong>1. stage1</strong></p>\n<p>如上述介绍，这部分代码存放于MBR中，其重要作用是启动装载stage2。</p>\n<p><strong>2. stage1.5</strong></p>\n<p>这部分代码存放在MBR后面的分区。它能识别启动分区文件系统，是stage1和stage2的桥梁，访问/boot分区grub目录下的stage2文件，并载入内存。</p>\n<p><strong>3 stage2</strong></p>\n<p>这部分启动代码的主要作用为：</p>\n<ul>\n<li>能够解析grub的配置文件，位于/boot分区下的/grub/grub.conf</li>\n<li>显示操作系统的启动菜单</li>\n<li>加载内核镜像到北村</li>\n<li>通过/boot/initrd开头文件建立虚拟操作系统</li>\n<li>将控制权转交给内核</li>\n</ul>\n<h2 id=\"3-内核引导阶段\"><a href=\"#3-内核引导阶段\" class=\"headerlink\" title=\"3. 内核引导阶段\"></a>3. 内核引导阶段</h2><p>经过上述过程后开始进入内核引导阶段：</p>\n<ul>\n<li>调用虚拟文件系统中的init</li>\n<li>加载驱动模块，初始化并配置系统中的歌模块</li>\n<li>加载并切换真正的文件系统</li>\n<li>协助内核呼叫进程/sbin/init程序</li>\n</ul>\n<hr>\n<p>经历上上述各阶段启动和引导后，开始进行系统初始化和启动终端，整个linux系统完成启动。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文以x86 PC为例，简要介绍linux启动流程。</p>\n<h2 id=\"1-硬件启动流程\"><a href=\"#1-硬件启动流程\" class=\"headerlink\" title=\"1. 硬件启动流程\"></a>1. 硬件启动流程</h2><p>当PC上电后，需要根据PC寄存器的值进行取值执行。那么上电后PC寄存器的值会是多少呢？答案是BIOS映射区。</p>\n<p>BIOS即基本输入输出系统，主要完成两部分工作：<br></p>\n<ul>\n<li>POST，即上电自检。初始化硬件设备，并检查系统外围主要设备，如内存、键盘、显示器、软硬磁盘等；<br></li>\n<li>确定启动设备。根据设置的启动顺序，检测驱动器，将磁盘的0磁道0扇区扇区拷贝（512B）到内存（该扇区即引导扇区，其中存放的是MBR即主引导记录）。然后将控制权转交给MBR中的Bootloader。<blockquote>\n<p>其中磁盘0磁道0扇区即引导扇区，其中存放的是MBR即主引导扇区。其中主要包含两部分内容：</p>\n<ul>\n<li>Bootloader的stage1</li>\n<li>硬盘分区表DDT和魔数</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"2-GRUB启动引导\"><a href=\"#2-GRUB启动引导\" class=\"headerlink\" title=\"2. GRUB启动引导\"></a>2. GRUB启动引导</h2><p>这部分的启动主要分为三个阶段：stage1、stage1.5、stage2。</p>\n<p><strong>1. stage1</strong></p>\n<p>如上述介绍，这部分代码存放于MBR中，其重要作用是启动装载stage2。</p>\n<p><strong>2. stage1.5</strong></p>\n<p>这部分代码存放在MBR后面的分区。它能识别启动分区文件系统，是stage1和stage2的桥梁，访问/boot分区grub目录下的stage2文件，并载入内存。</p>\n<p><strong>3 stage2</strong></p>\n<p>这部分启动代码的主要作用为：</p>\n<ul>\n<li>能够解析grub的配置文件，位于/boot分区下的/grub/grub.conf</li>\n<li>显示操作系统的启动菜单</li>\n<li>加载内核镜像到北村</li>\n<li>通过/boot/initrd开头文件建立虚拟操作系统</li>\n<li>将控制权转交给内核</li>\n</ul>\n<h2 id=\"3-内核引导阶段\"><a href=\"#3-内核引导阶段\" class=\"headerlink\" title=\"3. 内核引导阶段\"></a>3. 内核引导阶段</h2><p>经过上述过程后开始进入内核引导阶段：</p>\n<ul>\n<li>调用虚拟文件系统中的init</li>\n<li>加载驱动模块，初始化并配置系统中的歌模块</li>\n<li>加载并切换真正的文件系统</li>\n<li>协助内核呼叫进程/sbin/init程序</li>\n</ul>\n<hr>\n<p>经历上上述各阶段启动和引导后，开始进行系统初始化和启动终端，整个linux系统完成启动。</p>\n"},{"title":"linux进程、线程和调度(一)","date":"2018-07-19T14:13:34.000Z","_content":"\n## Linux进程生命周期\n#### 什么是进程\n进程是资源分配的单位，每个进程都有进程控制块(PCB)。\n\n进程用task_strcut描述：\n```cpp\ntask_struct\n{\n    pid\n    ...\n    *mm\n    *fs\n    *files\n    *signal\n}\n```\n上述代码块展示了task_struct中描述的关于进程的比较重要的资源，如：进程号、内存资源、文件系统资源、文件资源、信号资源等。\n\n其中，Linux中的进程号pid是有限的，可以通过`cat /proc/sys/kernel/pid_max`来查看当前系统所允许的最大进程个数。\n\n一个有趣的实验：通过Fork炸弹，可以使系统挂掉。即运行`:(){:|:&};:`\n\n#### 进程被如何管理\n上节所示，进程用task_struct描述，而task_struct在linux中被多种数据结构描述：链表、树、哈希。用以满足不同的应用场景。\n\n如果想表里所有进程，则使用链表；如果想知道进程间关系，则使用树；如果想通过pid快速检索一个进程，则使用哈希。\n\n#### 进程生命周期\n用一张图总括linux中任务的生命周期：<br>\n![进程生命周期](https://github.com/howar-luo/image_repo/blob/master/task_life.png?raw=true)<br>\n从上图可以看出，任务总共有六个状态。\n\n\n## 僵尸进程\n#### 基本概念\n一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵死进程。\n\n任何一个子进程(init除外)在exit()之后，并非马上就消失掉，而是留下一个称为僵尸进程(Zombie)的数据结构，等待父进程处理。这是每个 子进程在结束时都要经过的阶段。如果子进程在exit()之后，父进程没有来得及处理，这时用ps命令就能看到子进程的状态是“Z”。如果父进程能及时处理，可能用ps命令就来不及看到子进程的僵尸状态，但这并不等于子进程不经过僵尸状态。如果父进程在子进程结束之前退出，则子进程将由init接管。init将会以父进程的身份对僵尸状态的子进程进行处理。\n\n#### 问题及危害\n在每个进程退出的时候,内核释放该进程所有的资源,包括打开的文件,占用的内存等。但是仍然为其保留一定的信息(包括进程号the process ID,退出状态the termination status of the process,运行时间the amount of CPU time taken by the process等)。直到父进程通过wait/waitpid来取时才释放。但这样就导致了问题，如果进程不调用wait/waitpid的话，那么保留的那段信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果大量的产生僵死进程，将因为没有可用的进程号而导致系统不能产生新的进程. 此即为僵尸进程的危害，应当避免。\n\n#### 如何杀死僵尸进程\n用kill是杀不死僵尸进程的。\n杀死僵尸进程的方法有二：\n+ 重启系统\n+ 杀掉该僵尸进程的父进程\n\n## 停止状态与作业控制\n停止态及任务停止工作，暂停了，且不占用cpu。\n\n当收到STOP信号后，任务进入停止态，比如收到了`ctrl+z`，或者被`gdb attach`了。\n\n其中`ctrl+z`属于作业控制。\n\n## 深睡眠和浅睡眠\n浅睡眠：可以被资源唤醒，也可以被信号唤醒。\n\n深睡眠：只能被资源唤醒。\n\n为何有了浅睡眠还要搞个深睡眠？考虑以下场景：\n> 如果执行到某个代码段，该代码段还在硬盘中，未被拷贝到内存中，则会产生一个pagefault，用以将该代码段读到内存中，接下来，linux会将该等待进程置位深度睡眠态。如果此时为浅度睡眠，则会相应signal，如果该signal的处理函数也未被读到内存，则又发生pagefault......这种情况处理起来太复杂了\n\n## 初见fork\n首先看一段程序：\n```\nmain()\n{\n    fork();\n    printf(\"hello\\r\\n\");\n    fork();\n    printf(\"hello\\r\\n\");\n    while(1);\n}\n```\n上述程序会打印几个`hello`？答案是6个。\n\nfork所执行的效果，既是一个进程进去，两个进程出来。","source":"_posts/linux-process-1.md","raw":"---\ntitle: linux进程、线程和调度(一)\ndate: 2018-07-19 22:13:34\ncategories: Linux\ntags: Process\n---\n\n## Linux进程生命周期\n#### 什么是进程\n进程是资源分配的单位，每个进程都有进程控制块(PCB)。\n\n进程用task_strcut描述：\n```cpp\ntask_struct\n{\n    pid\n    ...\n    *mm\n    *fs\n    *files\n    *signal\n}\n```\n上述代码块展示了task_struct中描述的关于进程的比较重要的资源，如：进程号、内存资源、文件系统资源、文件资源、信号资源等。\n\n其中，Linux中的进程号pid是有限的，可以通过`cat /proc/sys/kernel/pid_max`来查看当前系统所允许的最大进程个数。\n\n一个有趣的实验：通过Fork炸弹，可以使系统挂掉。即运行`:(){:|:&};:`\n\n#### 进程被如何管理\n上节所示，进程用task_struct描述，而task_struct在linux中被多种数据结构描述：链表、树、哈希。用以满足不同的应用场景。\n\n如果想表里所有进程，则使用链表；如果想知道进程间关系，则使用树；如果想通过pid快速检索一个进程，则使用哈希。\n\n#### 进程生命周期\n用一张图总括linux中任务的生命周期：<br>\n![进程生命周期](https://github.com/howar-luo/image_repo/blob/master/task_life.png?raw=true)<br>\n从上图可以看出，任务总共有六个状态。\n\n\n## 僵尸进程\n#### 基本概念\n一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵死进程。\n\n任何一个子进程(init除外)在exit()之后，并非马上就消失掉，而是留下一个称为僵尸进程(Zombie)的数据结构，等待父进程处理。这是每个 子进程在结束时都要经过的阶段。如果子进程在exit()之后，父进程没有来得及处理，这时用ps命令就能看到子进程的状态是“Z”。如果父进程能及时处理，可能用ps命令就来不及看到子进程的僵尸状态，但这并不等于子进程不经过僵尸状态。如果父进程在子进程结束之前退出，则子进程将由init接管。init将会以父进程的身份对僵尸状态的子进程进行处理。\n\n#### 问题及危害\n在每个进程退出的时候,内核释放该进程所有的资源,包括打开的文件,占用的内存等。但是仍然为其保留一定的信息(包括进程号the process ID,退出状态the termination status of the process,运行时间the amount of CPU time taken by the process等)。直到父进程通过wait/waitpid来取时才释放。但这样就导致了问题，如果进程不调用wait/waitpid的话，那么保留的那段信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果大量的产生僵死进程，将因为没有可用的进程号而导致系统不能产生新的进程. 此即为僵尸进程的危害，应当避免。\n\n#### 如何杀死僵尸进程\n用kill是杀不死僵尸进程的。\n杀死僵尸进程的方法有二：\n+ 重启系统\n+ 杀掉该僵尸进程的父进程\n\n## 停止状态与作业控制\n停止态及任务停止工作，暂停了，且不占用cpu。\n\n当收到STOP信号后，任务进入停止态，比如收到了`ctrl+z`，或者被`gdb attach`了。\n\n其中`ctrl+z`属于作业控制。\n\n## 深睡眠和浅睡眠\n浅睡眠：可以被资源唤醒，也可以被信号唤醒。\n\n深睡眠：只能被资源唤醒。\n\n为何有了浅睡眠还要搞个深睡眠？考虑以下场景：\n> 如果执行到某个代码段，该代码段还在硬盘中，未被拷贝到内存中，则会产生一个pagefault，用以将该代码段读到内存中，接下来，linux会将该等待进程置位深度睡眠态。如果此时为浅度睡眠，则会相应signal，如果该signal的处理函数也未被读到内存，则又发生pagefault......这种情况处理起来太复杂了\n\n## 初见fork\n首先看一段程序：\n```\nmain()\n{\n    fork();\n    printf(\"hello\\r\\n\");\n    fork();\n    printf(\"hello\\r\\n\");\n    while(1);\n}\n```\n上述程序会打印几个`hello`？答案是6个。\n\nfork所执行的效果，既是一个进程进去，两个进程出来。","slug":"linux-process-1","published":1,"updated":"2018-07-29T14:15:13.304Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgs2ncx00081guo7jdvk5dw","content":"<h2 id=\"Linux进程生命周期\"><a href=\"#Linux进程生命周期\" class=\"headerlink\" title=\"Linux进程生命周期\"></a>Linux进程生命周期</h2><h4 id=\"什么是进程\"><a href=\"#什么是进程\" class=\"headerlink\" title=\"什么是进程\"></a>什么是进程</h4><p>进程是资源分配的单位，每个进程都有进程控制块(PCB)。</p>\n<p>进程用task_strcut描述：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task_struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    *mm</span><br><span class=\"line\">    *fs</span><br><span class=\"line\">    *files</span><br><span class=\"line\">    *signal</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上述代码块展示了task_struct中描述的关于进程的比较重要的资源，如：进程号、内存资源、文件系统资源、文件资源、信号资源等。</p>\n<p>其中，Linux中的进程号pid是有限的，可以通过<code>cat /proc/sys/kernel/pid_max</code>来查看当前系统所允许的最大进程个数。</p>\n<p>一个有趣的实验：通过Fork炸弹，可以使系统挂掉。即运行<code>:(){:|:&amp;};:</code></p>\n<h4 id=\"进程被如何管理\"><a href=\"#进程被如何管理\" class=\"headerlink\" title=\"进程被如何管理\"></a>进程被如何管理</h4><p>上节所示，进程用task_struct描述，而task_struct在linux中被多种数据结构描述：链表、树、哈希。用以满足不同的应用场景。</p>\n<p>如果想表里所有进程，则使用链表；如果想知道进程间关系，则使用树；如果想通过pid快速检索一个进程，则使用哈希。</p>\n<h4 id=\"进程生命周期\"><a href=\"#进程生命周期\" class=\"headerlink\" title=\"进程生命周期\"></a>进程生命周期</h4><p>用一张图总括linux中任务的生命周期：<br><br><img src=\"https://github.com/howar-luo/image_repo/blob/master/task_life.png?raw=true\" alt=\"进程生命周期\"><br><br>从上图可以看出，任务总共有六个状态。</p>\n<h2 id=\"僵尸进程\"><a href=\"#僵尸进程\" class=\"headerlink\" title=\"僵尸进程\"></a>僵尸进程</h2><h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><p>一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵死进程。</p>\n<p>任何一个子进程(init除外)在exit()之后，并非马上就消失掉，而是留下一个称为僵尸进程(Zombie)的数据结构，等待父进程处理。这是每个 子进程在结束时都要经过的阶段。如果子进程在exit()之后，父进程没有来得及处理，这时用ps命令就能看到子进程的状态是“Z”。如果父进程能及时处理，可能用ps命令就来不及看到子进程的僵尸状态，但这并不等于子进程不经过僵尸状态。如果父进程在子进程结束之前退出，则子进程将由init接管。init将会以父进程的身份对僵尸状态的子进程进行处理。</p>\n<h4 id=\"问题及危害\"><a href=\"#问题及危害\" class=\"headerlink\" title=\"问题及危害\"></a>问题及危害</h4><p>在每个进程退出的时候,内核释放该进程所有的资源,包括打开的文件,占用的内存等。但是仍然为其保留一定的信息(包括进程号the process ID,退出状态the termination status of the process,运行时间the amount of CPU time taken by the process等)。直到父进程通过wait/waitpid来取时才释放。但这样就导致了问题，如果进程不调用wait/waitpid的话，那么保留的那段信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果大量的产生僵死进程，将因为没有可用的进程号而导致系统不能产生新的进程. 此即为僵尸进程的危害，应当避免。</p>\n<h4 id=\"如何杀死僵尸进程\"><a href=\"#如何杀死僵尸进程\" class=\"headerlink\" title=\"如何杀死僵尸进程\"></a>如何杀死僵尸进程</h4><p>用kill是杀不死僵尸进程的。<br>杀死僵尸进程的方法有二：</p>\n<ul>\n<li>重启系统</li>\n<li>杀掉该僵尸进程的父进程</li>\n</ul>\n<h2 id=\"停止状态与作业控制\"><a href=\"#停止状态与作业控制\" class=\"headerlink\" title=\"停止状态与作业控制\"></a>停止状态与作业控制</h2><p>停止态及任务停止工作，暂停了，且不占用cpu。</p>\n<p>当收到STOP信号后，任务进入停止态，比如收到了<code>ctrl+z</code>，或者被<code>gdb attach</code>了。</p>\n<p>其中<code>ctrl+z</code>属于作业控制。</p>\n<h2 id=\"深睡眠和浅睡眠\"><a href=\"#深睡眠和浅睡眠\" class=\"headerlink\" title=\"深睡眠和浅睡眠\"></a>深睡眠和浅睡眠</h2><p>浅睡眠：可以被资源唤醒，也可以被信号唤醒。</p>\n<p>深睡眠：只能被资源唤醒。</p>\n<p>为何有了浅睡眠还要搞个深睡眠？考虑以下场景：</p>\n<blockquote>\n<p>如果执行到某个代码段，该代码段还在硬盘中，未被拷贝到内存中，则会产生一个pagefault，用以将该代码段读到内存中，接下来，linux会将该等待进程置位深度睡眠态。如果此时为浅度睡眠，则会相应signal，如果该signal的处理函数也未被读到内存，则又发生pagefault……这种情况处理起来太复杂了</p>\n</blockquote>\n<h2 id=\"初见fork\"><a href=\"#初见fork\" class=\"headerlink\" title=\"初见fork\"></a>初见fork</h2><p>首先看一段程序：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    fork();</span><br><span class=\"line\">    printf(&quot;hello\\r\\n&quot;);</span><br><span class=\"line\">    fork();</span><br><span class=\"line\">    printf(&quot;hello\\r\\n&quot;);</span><br><span class=\"line\">    while(1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上述程序会打印几个<code>hello</code>？答案是6个。</p>\n<p>fork所执行的效果，既是一个进程进去，两个进程出来。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Linux进程生命周期\"><a href=\"#Linux进程生命周期\" class=\"headerlink\" title=\"Linux进程生命周期\"></a>Linux进程生命周期</h2><h4 id=\"什么是进程\"><a href=\"#什么是进程\" class=\"headerlink\" title=\"什么是进程\"></a>什么是进程</h4><p>进程是资源分配的单位，每个进程都有进程控制块(PCB)。</p>\n<p>进程用task_strcut描述：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task_struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    pid</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    *mm</span><br><span class=\"line\">    *fs</span><br><span class=\"line\">    *files</span><br><span class=\"line\">    *signal</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上述代码块展示了task_struct中描述的关于进程的比较重要的资源，如：进程号、内存资源、文件系统资源、文件资源、信号资源等。</p>\n<p>其中，Linux中的进程号pid是有限的，可以通过<code>cat /proc/sys/kernel/pid_max</code>来查看当前系统所允许的最大进程个数。</p>\n<p>一个有趣的实验：通过Fork炸弹，可以使系统挂掉。即运行<code>:(){:|:&amp;};:</code></p>\n<h4 id=\"进程被如何管理\"><a href=\"#进程被如何管理\" class=\"headerlink\" title=\"进程被如何管理\"></a>进程被如何管理</h4><p>上节所示，进程用task_struct描述，而task_struct在linux中被多种数据结构描述：链表、树、哈希。用以满足不同的应用场景。</p>\n<p>如果想表里所有进程，则使用链表；如果想知道进程间关系，则使用树；如果想通过pid快速检索一个进程，则使用哈希。</p>\n<h4 id=\"进程生命周期\"><a href=\"#进程生命周期\" class=\"headerlink\" title=\"进程生命周期\"></a>进程生命周期</h4><p>用一张图总括linux中任务的生命周期：<br><br><img src=\"https://github.com/howar-luo/image_repo/blob/master/task_life.png?raw=true\" alt=\"进程生命周期\"><br><br>从上图可以看出，任务总共有六个状态。</p>\n<h2 id=\"僵尸进程\"><a href=\"#僵尸进程\" class=\"headerlink\" title=\"僵尸进程\"></a>僵尸进程</h2><h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><p>一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵死进程。</p>\n<p>任何一个子进程(init除外)在exit()之后，并非马上就消失掉，而是留下一个称为僵尸进程(Zombie)的数据结构，等待父进程处理。这是每个 子进程在结束时都要经过的阶段。如果子进程在exit()之后，父进程没有来得及处理，这时用ps命令就能看到子进程的状态是“Z”。如果父进程能及时处理，可能用ps命令就来不及看到子进程的僵尸状态，但这并不等于子进程不经过僵尸状态。如果父进程在子进程结束之前退出，则子进程将由init接管。init将会以父进程的身份对僵尸状态的子进程进行处理。</p>\n<h4 id=\"问题及危害\"><a href=\"#问题及危害\" class=\"headerlink\" title=\"问题及危害\"></a>问题及危害</h4><p>在每个进程退出的时候,内核释放该进程所有的资源,包括打开的文件,占用的内存等。但是仍然为其保留一定的信息(包括进程号the process ID,退出状态the termination status of the process,运行时间the amount of CPU time taken by the process等)。直到父进程通过wait/waitpid来取时才释放。但这样就导致了问题，如果进程不调用wait/waitpid的话，那么保留的那段信息就不会释放，其进程号就会一直被占用，但是系统所能使用的进程号是有限的，如果大量的产生僵死进程，将因为没有可用的进程号而导致系统不能产生新的进程. 此即为僵尸进程的危害，应当避免。</p>\n<h4 id=\"如何杀死僵尸进程\"><a href=\"#如何杀死僵尸进程\" class=\"headerlink\" title=\"如何杀死僵尸进程\"></a>如何杀死僵尸进程</h4><p>用kill是杀不死僵尸进程的。<br>杀死僵尸进程的方法有二：</p>\n<ul>\n<li>重启系统</li>\n<li>杀掉该僵尸进程的父进程</li>\n</ul>\n<h2 id=\"停止状态与作业控制\"><a href=\"#停止状态与作业控制\" class=\"headerlink\" title=\"停止状态与作业控制\"></a>停止状态与作业控制</h2><p>停止态及任务停止工作，暂停了，且不占用cpu。</p>\n<p>当收到STOP信号后，任务进入停止态，比如收到了<code>ctrl+z</code>，或者被<code>gdb attach</code>了。</p>\n<p>其中<code>ctrl+z</code>属于作业控制。</p>\n<h2 id=\"深睡眠和浅睡眠\"><a href=\"#深睡眠和浅睡眠\" class=\"headerlink\" title=\"深睡眠和浅睡眠\"></a>深睡眠和浅睡眠</h2><p>浅睡眠：可以被资源唤醒，也可以被信号唤醒。</p>\n<p>深睡眠：只能被资源唤醒。</p>\n<p>为何有了浅睡眠还要搞个深睡眠？考虑以下场景：</p>\n<blockquote>\n<p>如果执行到某个代码段，该代码段还在硬盘中，未被拷贝到内存中，则会产生一个pagefault，用以将该代码段读到内存中，接下来，linux会将该等待进程置位深度睡眠态。如果此时为浅度睡眠，则会相应signal，如果该signal的处理函数也未被读到内存，则又发生pagefault……这种情况处理起来太复杂了</p>\n</blockquote>\n<h2 id=\"初见fork\"><a href=\"#初见fork\" class=\"headerlink\" title=\"初见fork\"></a>初见fork</h2><p>首先看一段程序：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    fork();</span><br><span class=\"line\">    printf(&quot;hello\\r\\n&quot;);</span><br><span class=\"line\">    fork();</span><br><span class=\"line\">    printf(&quot;hello\\r\\n&quot;);</span><br><span class=\"line\">    while(1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上述程序会打印几个<code>hello</code>？答案是6个。</p>\n<p>fork所执行的效果，既是一个进程进去，两个进程出来。</p>\n"},{"title":"linux-process-2","date":"2018-07-20T09:02:26.000Z","_content":"\n## fork、vfork\n#### fork\nfork的结果，是创建出新的task_struct，当子进程的task_struct刚被创建出来是，其成员(即资源)完全是从父进程处对拷过来的，即执行一个copy。此时，任何资源的修改都造成分裂。<br>\n其中，除了一种资源外其他资源的分裂都比较好理解，这种资源就是内存资源。考虑以下代码：\n```\n#include <sched.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint data = 10;\n\nint child_process()\n{\n\tprintf(\"Child process %d, data %d\\n\",getpid(),data);\n\tdata = 20;\n\tprintf(\"Child process %d, data %d\\n\",getpid(),data);\n\t_exit(0);\n}\n\nint main(int argc, char* argv[])\n{\n\tint pid;\n\tpid = fork();\n\n\tif(pid==0) {\n\t\tchild_process();\n\t}\n\telse{\n\t\tsleep(1);\n\t\tprintf(\"Parent process %d, data %d\\n\",getpid(), data);\n\t\texit(0);\n\t}\n}\n```\n这三次打印的`data`的值为多少？答案是`10 20 10`。这其中经历了写时拷贝，即copy-on-write，从微观上看，子进程中的`data = 20`这句话，执行时间是很长的。\n\n#### 写时拷贝技术\n要想理解写时拷贝，先看下面一幅图：<br/>\n<img src=\"https://github.com/howar-luo/image_repo/blob/master/cow.PNG?raw=true\" width=\"60%\" height=\"\" />\n\n父进程P1中的某个内存变量有一个虚拟地址和一个物理地址，通过MMU进行映射，并且原则上将权限设置为RW。当子进程P2被创建出来后，它所看到的对应的内存变量与P1具有相同的虚拟地址和物理地址。此时，操作系统会将MMU中该页表的权限修改为RD-ONLY，这样无论P1还是P2哪个进程去写该内存变量，都会产生一个page fault，然后为写该变量的进程申请一页新的物理内存，然后把老的那一页的内容拷贝到新的物理页上，并修改进程页表。从此，虽然父子进程看到的该内存变量的虚拟地址一样，其物理地址已经不同了。之后Linux会将两个物理地址所对应的页表权限都改成RW。\n\n\n***要注意的是，COW是严格要求硬件有MMU的***\n#### vfork\n如上可知，fork会用到COW技术。而vfork不会用到COW技术。\n\n使用vfork时，父进程会阻塞，知道子进程执行`exit`或者`exec`。\n\n上面介绍到，fork后，父子进程的task_struct中的资源都会对拷分裂；而vfork与fork相比，有些不同。vfork时，其他资源还是会对拷分裂，但是内存资源不会，子进程的mm_struct直接指向父进程的mm_struct，即父子进程的内存资源完全一样。如果将上述代码改成：\n```\n#include <sched.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint data = 10;\n\nint child_process()\n{\n\tprintf(\"Child process %d, data %d\\n\",getpid(),data);\n\tdata = 20;\n\tprintf(\"Child process %d, data %d\\n\",getpid(),data);\n\t_exit(0);\n}\n\nint main(int argc, char* argv[])\n{\n\tint pid;\n\tpid = vfork();\n\n\tif(pid==0) {\n\t\tchild_process();\n\t}\n\telse{\n\t\tsleep(1);\n\t\tprintf(\"Parent process %d, data %d\\n\",getpid(), data);\n\t\texit(0);\n\t}\n}\n```\n则三次打印的`data`的值会变成`10 20 20`。\n\n## Linux线程的实现本质(clone)\n上面介绍了vfork和fork的区别，那么，如果在创建进程的时候，task_struct中的所有资源都不再分裂，即父子进程中的所有资源都指向同一份(完全执行clone)，即资源共享，则这就是线程。创建线程用pthread_create，每个线程也有一个task_struct，所以线程是调度的最小单位。\n\n## PID和TGID\n首先看一幅图：<br />\n<img src=\"https://github.com/howar-luo/image_repo/blob/master/20180730/pid_tgid.PNG?raw=true\" width=\"60%\" height=\"\" />\n\n可以看出，同一个进程下的多个线程具有相同的TGID(thread group id)，而通过getpid获取到的其实是TGID。实际上，每个线程在内核中都有一个独一无二的pid。\n\n那么，如何获取线程的pid呢？可以通过系统调用获取。首先要知道获取线程的pid的系统调用号为：\n```\n#define __NR_gettid 224\n```\n那么可以通过`syscall(__NR_gettid)`来获取线程的pid。\n\n## 进程0和进程1\n每当cpu上电，bios或bootloder之类的引导程序会在一个cpu上创建一个0进程，该进程进而在其它cpu复制一个子进程，并把这些子进程的pid设置为0.0进程是通过全局静态的数据结构来初始化的，特别是主内核页全局目录放在swapper_pg_dir中。\n\n0进程，进一步调用init函数创建子进程1号进程。\n\n0进程也叫idle进程，实际上只有当系统中没有其它进程处于running态时，才会执行idle进程。\n\n1进程也叫init进程，其生命周期直到系统结束，因为init进程负创建及监视其它进程。\n\n## 孤儿进程\n一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程一定会将被init进程(进程号为1)所收养吗？先看下面一张图：<br />\n<img src=\"https://github.com/howar-luo/image_repo/blob/master/20180730/subreaper.PNG?raw=true\" width=\"60%\" height=\"\" />\n\n当P2和P4被杀死以后，P3被init收养，而P5被subreaper收养。所以，孤儿进程并不一定都是被init收养。\n\n那么，如何可以成为具有subreaper属性的进程呢？答案是，使用prctl接口:`prctl(PR_SET_CHILD_SUBREAPER, 1)`。当一个进程具有subreaper属性后，就可以收养进程在托孤过程中经过该进程的孤儿进程。***注：该特性是在linux3.4中才加入的。***\n","source":"_posts/linux-process-2.md","raw":"---\ntitle: linux-process-2\ndate: 2018-07-20 17:02:26\ncategories: Linux\ntags: Process\n---\n\n## fork、vfork\n#### fork\nfork的结果，是创建出新的task_struct，当子进程的task_struct刚被创建出来是，其成员(即资源)完全是从父进程处对拷过来的，即执行一个copy。此时，任何资源的修改都造成分裂。<br>\n其中，除了一种资源外其他资源的分裂都比较好理解，这种资源就是内存资源。考虑以下代码：\n```\n#include <sched.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint data = 10;\n\nint child_process()\n{\n\tprintf(\"Child process %d, data %d\\n\",getpid(),data);\n\tdata = 20;\n\tprintf(\"Child process %d, data %d\\n\",getpid(),data);\n\t_exit(0);\n}\n\nint main(int argc, char* argv[])\n{\n\tint pid;\n\tpid = fork();\n\n\tif(pid==0) {\n\t\tchild_process();\n\t}\n\telse{\n\t\tsleep(1);\n\t\tprintf(\"Parent process %d, data %d\\n\",getpid(), data);\n\t\texit(0);\n\t}\n}\n```\n这三次打印的`data`的值为多少？答案是`10 20 10`。这其中经历了写时拷贝，即copy-on-write，从微观上看，子进程中的`data = 20`这句话，执行时间是很长的。\n\n#### 写时拷贝技术\n要想理解写时拷贝，先看下面一幅图：<br/>\n<img src=\"https://github.com/howar-luo/image_repo/blob/master/cow.PNG?raw=true\" width=\"60%\" height=\"\" />\n\n父进程P1中的某个内存变量有一个虚拟地址和一个物理地址，通过MMU进行映射，并且原则上将权限设置为RW。当子进程P2被创建出来后，它所看到的对应的内存变量与P1具有相同的虚拟地址和物理地址。此时，操作系统会将MMU中该页表的权限修改为RD-ONLY，这样无论P1还是P2哪个进程去写该内存变量，都会产生一个page fault，然后为写该变量的进程申请一页新的物理内存，然后把老的那一页的内容拷贝到新的物理页上，并修改进程页表。从此，虽然父子进程看到的该内存变量的虚拟地址一样，其物理地址已经不同了。之后Linux会将两个物理地址所对应的页表权限都改成RW。\n\n\n***要注意的是，COW是严格要求硬件有MMU的***\n#### vfork\n如上可知，fork会用到COW技术。而vfork不会用到COW技术。\n\n使用vfork时，父进程会阻塞，知道子进程执行`exit`或者`exec`。\n\n上面介绍到，fork后，父子进程的task_struct中的资源都会对拷分裂；而vfork与fork相比，有些不同。vfork时，其他资源还是会对拷分裂，但是内存资源不会，子进程的mm_struct直接指向父进程的mm_struct，即父子进程的内存资源完全一样。如果将上述代码改成：\n```\n#include <sched.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint data = 10;\n\nint child_process()\n{\n\tprintf(\"Child process %d, data %d\\n\",getpid(),data);\n\tdata = 20;\n\tprintf(\"Child process %d, data %d\\n\",getpid(),data);\n\t_exit(0);\n}\n\nint main(int argc, char* argv[])\n{\n\tint pid;\n\tpid = vfork();\n\n\tif(pid==0) {\n\t\tchild_process();\n\t}\n\telse{\n\t\tsleep(1);\n\t\tprintf(\"Parent process %d, data %d\\n\",getpid(), data);\n\t\texit(0);\n\t}\n}\n```\n则三次打印的`data`的值会变成`10 20 20`。\n\n## Linux线程的实现本质(clone)\n上面介绍了vfork和fork的区别，那么，如果在创建进程的时候，task_struct中的所有资源都不再分裂，即父子进程中的所有资源都指向同一份(完全执行clone)，即资源共享，则这就是线程。创建线程用pthread_create，每个线程也有一个task_struct，所以线程是调度的最小单位。\n\n## PID和TGID\n首先看一幅图：<br />\n<img src=\"https://github.com/howar-luo/image_repo/blob/master/20180730/pid_tgid.PNG?raw=true\" width=\"60%\" height=\"\" />\n\n可以看出，同一个进程下的多个线程具有相同的TGID(thread group id)，而通过getpid获取到的其实是TGID。实际上，每个线程在内核中都有一个独一无二的pid。\n\n那么，如何获取线程的pid呢？可以通过系统调用获取。首先要知道获取线程的pid的系统调用号为：\n```\n#define __NR_gettid 224\n```\n那么可以通过`syscall(__NR_gettid)`来获取线程的pid。\n\n## 进程0和进程1\n每当cpu上电，bios或bootloder之类的引导程序会在一个cpu上创建一个0进程，该进程进而在其它cpu复制一个子进程，并把这些子进程的pid设置为0.0进程是通过全局静态的数据结构来初始化的，特别是主内核页全局目录放在swapper_pg_dir中。\n\n0进程，进一步调用init函数创建子进程1号进程。\n\n0进程也叫idle进程，实际上只有当系统中没有其它进程处于running态时，才会执行idle进程。\n\n1进程也叫init进程，其生命周期直到系统结束，因为init进程负创建及监视其它进程。\n\n## 孤儿进程\n一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程一定会将被init进程(进程号为1)所收养吗？先看下面一张图：<br />\n<img src=\"https://github.com/howar-luo/image_repo/blob/master/20180730/subreaper.PNG?raw=true\" width=\"60%\" height=\"\" />\n\n当P2和P4被杀死以后，P3被init收养，而P5被subreaper收养。所以，孤儿进程并不一定都是被init收养。\n\n那么，如何可以成为具有subreaper属性的进程呢？答案是，使用prctl接口:`prctl(PR_SET_CHILD_SUBREAPER, 1)`。当一个进程具有subreaper属性后，就可以收养进程在托孤过程中经过该进程的孤儿进程。***注：该特性是在linux3.4中才加入的。***\n","slug":"linux-process-2","published":1,"updated":"2018-08-05T11:40:02.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgs2ncx00091guowwqqx3bc","content":"<h2 id=\"fork、vfork\"><a href=\"#fork、vfork\" class=\"headerlink\" title=\"fork、vfork\"></a>fork、vfork</h2><h4 id=\"fork\"><a href=\"#fork\" class=\"headerlink\" title=\"fork\"></a>fork</h4><p>fork的结果，是创建出新的task_struct，当子进程的task_struct刚被创建出来是，其成员(即资源)完全是从父进程处对拷过来的，即执行一个copy。此时，任何资源的修改都造成分裂。<br><br>其中，除了一种资源外其他资源的分裂都比较好理解，这种资源就是内存资源。考虑以下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int data = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">int child_process()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprintf(&quot;Child process %d, data %d\\n&quot;,getpid(),data);</span><br><span class=\"line\">\tdata = 20;</span><br><span class=\"line\">\tprintf(&quot;Child process %d, data %d\\n&quot;,getpid(),data);</span><br><span class=\"line\">\t_exit(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint pid;</span><br><span class=\"line\">\tpid = fork();</span><br><span class=\"line\"></span><br><span class=\"line\">\tif(pid==0) &#123;</span><br><span class=\"line\">\t\tchild_process();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse&#123;</span><br><span class=\"line\">\t\tsleep(1);</span><br><span class=\"line\">\t\tprintf(&quot;Parent process %d, data %d\\n&quot;,getpid(), data);</span><br><span class=\"line\">\t\texit(0);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这三次打印的<code>data</code>的值为多少？答案是<code>10 20 10</code>。这其中经历了写时拷贝，即copy-on-write，从微观上看，子进程中的<code>data = 20</code>这句话，执行时间是很长的。</p>\n<h4 id=\"写时拷贝技术\"><a href=\"#写时拷贝技术\" class=\"headerlink\" title=\"写时拷贝技术\"></a>写时拷贝技术</h4><p>要想理解写时拷贝，先看下面一幅图：<br><br><img src=\"https://github.com/howar-luo/image_repo/blob/master/cow.PNG?raw=true\" width=\"60%\" height=\"\"></p>\n<p>父进程P1中的某个内存变量有一个虚拟地址和一个物理地址，通过MMU进行映射，并且原则上将权限设置为RW。当子进程P2被创建出来后，它所看到的对应的内存变量与P1具有相同的虚拟地址和物理地址。此时，操作系统会将MMU中该页表的权限修改为RD-ONLY，这样无论P1还是P2哪个进程去写该内存变量，都会产生一个page fault，然后为写该变量的进程申请一页新的物理内存，然后把老的那一页的内容拷贝到新的物理页上，并修改进程页表。从此，虽然父子进程看到的该内存变量的虚拟地址一样，其物理地址已经不同了。之后Linux会将两个物理地址所对应的页表权限都改成RW。</p>\n<p><strong><em>要注意的是，COW是严格要求硬件有MMU的</em></strong></p>\n<h4 id=\"vfork\"><a href=\"#vfork\" class=\"headerlink\" title=\"vfork\"></a>vfork</h4><p>如上可知，fork会用到COW技术。而vfork不会用到COW技术。</p>\n<p>使用vfork时，父进程会阻塞，知道子进程执行<code>exit</code>或者<code>exec</code>。</p>\n<p>上面介绍到，fork后，父子进程的task_struct中的资源都会对拷分裂；而vfork与fork相比，有些不同。vfork时，其他资源还是会对拷分裂，但是内存资源不会，子进程的mm_struct直接指向父进程的mm_struct，即父子进程的内存资源完全一样。如果将上述代码改成：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int data = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">int child_process()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprintf(&quot;Child process %d, data %d\\n&quot;,getpid(),data);</span><br><span class=\"line\">\tdata = 20;</span><br><span class=\"line\">\tprintf(&quot;Child process %d, data %d\\n&quot;,getpid(),data);</span><br><span class=\"line\">\t_exit(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint pid;</span><br><span class=\"line\">\tpid = vfork();</span><br><span class=\"line\"></span><br><span class=\"line\">\tif(pid==0) &#123;</span><br><span class=\"line\">\t\tchild_process();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse&#123;</span><br><span class=\"line\">\t\tsleep(1);</span><br><span class=\"line\">\t\tprintf(&quot;Parent process %d, data %d\\n&quot;,getpid(), data);</span><br><span class=\"line\">\t\texit(0);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>则三次打印的<code>data</code>的值会变成<code>10 20 20</code>。</p>\n<h2 id=\"Linux线程的实现本质-clone\"><a href=\"#Linux线程的实现本质-clone\" class=\"headerlink\" title=\"Linux线程的实现本质(clone)\"></a>Linux线程的实现本质(clone)</h2><p>上面介绍了vfork和fork的区别，那么，如果在创建进程的时候，task_struct中的所有资源都不再分裂，即父子进程中的所有资源都指向同一份(完全执行clone)，即资源共享，则这就是线程。创建线程用pthread_create，每个线程也有一个task_struct，所以线程是调度的最小单位。</p>\n<h2 id=\"PID和TGID\"><a href=\"#PID和TGID\" class=\"headerlink\" title=\"PID和TGID\"></a>PID和TGID</h2><p>首先看一幅图：<br><br><img src=\"https://github.com/howar-luo/image_repo/blob/master/20180730/pid_tgid.PNG?raw=true\" width=\"60%\" height=\"\"></p>\n<p>可以看出，同一个进程下的多个线程具有相同的TGID(thread group id)，而通过getpid获取到的其实是TGID。实际上，每个线程在内核中都有一个独一无二的pid。</p>\n<p>那么，如何获取线程的pid呢？可以通过系统调用获取。首先要知道获取线程的pid的系统调用号为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define __NR_gettid 224</span><br></pre></td></tr></table></figure></p>\n<p>那么可以通过<code>syscall(__NR_gettid)</code>来获取线程的pid。</p>\n<h2 id=\"进程0和进程1\"><a href=\"#进程0和进程1\" class=\"headerlink\" title=\"进程0和进程1\"></a>进程0和进程1</h2><p>每当cpu上电，bios或bootloder之类的引导程序会在一个cpu上创建一个0进程，该进程进而在其它cpu复制一个子进程，并把这些子进程的pid设置为0.0进程是通过全局静态的数据结构来初始化的，特别是主内核页全局目录放在swapper_pg_dir中。</p>\n<p>0进程，进一步调用init函数创建子进程1号进程。</p>\n<p>0进程也叫idle进程，实际上只有当系统中没有其它进程处于running态时，才会执行idle进程。</p>\n<p>1进程也叫init进程，其生命周期直到系统结束，因为init进程负创建及监视其它进程。</p>\n<h2 id=\"孤儿进程\"><a href=\"#孤儿进程\" class=\"headerlink\" title=\"孤儿进程\"></a>孤儿进程</h2><p>一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程一定会将被init进程(进程号为1)所收养吗？先看下面一张图：<br><br><img src=\"https://github.com/howar-luo/image_repo/blob/master/20180730/subreaper.PNG?raw=true\" width=\"60%\" height=\"\"></p>\n<p>当P2和P4被杀死以后，P3被init收养，而P5被subreaper收养。所以，孤儿进程并不一定都是被init收养。</p>\n<p>那么，如何可以成为具有subreaper属性的进程呢？答案是，使用prctl接口:<code>prctl(PR_SET_CHILD_SUBREAPER, 1)</code>。当一个进程具有subreaper属性后，就可以收养进程在托孤过程中经过该进程的孤儿进程。<strong><em>注：该特性是在linux3.4中才加入的。</em></strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"fork、vfork\"><a href=\"#fork、vfork\" class=\"headerlink\" title=\"fork、vfork\"></a>fork、vfork</h2><h4 id=\"fork\"><a href=\"#fork\" class=\"headerlink\" title=\"fork\"></a>fork</h4><p>fork的结果，是创建出新的task_struct，当子进程的task_struct刚被创建出来是，其成员(即资源)完全是从父进程处对拷过来的，即执行一个copy。此时，任何资源的修改都造成分裂。<br><br>其中，除了一种资源外其他资源的分裂都比较好理解，这种资源就是内存资源。考虑以下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int data = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">int child_process()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprintf(&quot;Child process %d, data %d\\n&quot;,getpid(),data);</span><br><span class=\"line\">\tdata = 20;</span><br><span class=\"line\">\tprintf(&quot;Child process %d, data %d\\n&quot;,getpid(),data);</span><br><span class=\"line\">\t_exit(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint pid;</span><br><span class=\"line\">\tpid = fork();</span><br><span class=\"line\"></span><br><span class=\"line\">\tif(pid==0) &#123;</span><br><span class=\"line\">\t\tchild_process();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse&#123;</span><br><span class=\"line\">\t\tsleep(1);</span><br><span class=\"line\">\t\tprintf(&quot;Parent process %d, data %d\\n&quot;,getpid(), data);</span><br><span class=\"line\">\t\texit(0);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这三次打印的<code>data</code>的值为多少？答案是<code>10 20 10</code>。这其中经历了写时拷贝，即copy-on-write，从微观上看，子进程中的<code>data = 20</code>这句话，执行时间是很长的。</p>\n<h4 id=\"写时拷贝技术\"><a href=\"#写时拷贝技术\" class=\"headerlink\" title=\"写时拷贝技术\"></a>写时拷贝技术</h4><p>要想理解写时拷贝，先看下面一幅图：<br><br><img src=\"https://github.com/howar-luo/image_repo/blob/master/cow.PNG?raw=true\" width=\"60%\" height=\"\"></p>\n<p>父进程P1中的某个内存变量有一个虚拟地址和一个物理地址，通过MMU进行映射，并且原则上将权限设置为RW。当子进程P2被创建出来后，它所看到的对应的内存变量与P1具有相同的虚拟地址和物理地址。此时，操作系统会将MMU中该页表的权限修改为RD-ONLY，这样无论P1还是P2哪个进程去写该内存变量，都会产生一个page fault，然后为写该变量的进程申请一页新的物理内存，然后把老的那一页的内容拷贝到新的物理页上，并修改进程页表。从此，虽然父子进程看到的该内存变量的虚拟地址一样，其物理地址已经不同了。之后Linux会将两个物理地址所对应的页表权限都改成RW。</p>\n<p><strong><em>要注意的是，COW是严格要求硬件有MMU的</em></strong></p>\n<h4 id=\"vfork\"><a href=\"#vfork\" class=\"headerlink\" title=\"vfork\"></a>vfork</h4><p>如上可知，fork会用到COW技术。而vfork不会用到COW技术。</p>\n<p>使用vfork时，父进程会阻塞，知道子进程执行<code>exit</code>或者<code>exec</code>。</p>\n<p>上面介绍到，fork后，父子进程的task_struct中的资源都会对拷分裂；而vfork与fork相比，有些不同。vfork时，其他资源还是会对拷分裂，但是内存资源不会，子进程的mm_struct直接指向父进程的mm_struct，即父子进程的内存资源完全一样。如果将上述代码改成：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;sched.h&gt;</span><br><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int data = 10;</span><br><span class=\"line\"></span><br><span class=\"line\">int child_process()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprintf(&quot;Child process %d, data %d\\n&quot;,getpid(),data);</span><br><span class=\"line\">\tdata = 20;</span><br><span class=\"line\">\tprintf(&quot;Child process %d, data %d\\n&quot;,getpid(),data);</span><br><span class=\"line\">\t_exit(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char* argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint pid;</span><br><span class=\"line\">\tpid = vfork();</span><br><span class=\"line\"></span><br><span class=\"line\">\tif(pid==0) &#123;</span><br><span class=\"line\">\t\tchild_process();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\telse&#123;</span><br><span class=\"line\">\t\tsleep(1);</span><br><span class=\"line\">\t\tprintf(&quot;Parent process %d, data %d\\n&quot;,getpid(), data);</span><br><span class=\"line\">\t\texit(0);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>则三次打印的<code>data</code>的值会变成<code>10 20 20</code>。</p>\n<h2 id=\"Linux线程的实现本质-clone\"><a href=\"#Linux线程的实现本质-clone\" class=\"headerlink\" title=\"Linux线程的实现本质(clone)\"></a>Linux线程的实现本质(clone)</h2><p>上面介绍了vfork和fork的区别，那么，如果在创建进程的时候，task_struct中的所有资源都不再分裂，即父子进程中的所有资源都指向同一份(完全执行clone)，即资源共享，则这就是线程。创建线程用pthread_create，每个线程也有一个task_struct，所以线程是调度的最小单位。</p>\n<h2 id=\"PID和TGID\"><a href=\"#PID和TGID\" class=\"headerlink\" title=\"PID和TGID\"></a>PID和TGID</h2><p>首先看一幅图：<br><br><img src=\"https://github.com/howar-luo/image_repo/blob/master/20180730/pid_tgid.PNG?raw=true\" width=\"60%\" height=\"\"></p>\n<p>可以看出，同一个进程下的多个线程具有相同的TGID(thread group id)，而通过getpid获取到的其实是TGID。实际上，每个线程在内核中都有一个独一无二的pid。</p>\n<p>那么，如何获取线程的pid呢？可以通过系统调用获取。首先要知道获取线程的pid的系统调用号为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define __NR_gettid 224</span><br></pre></td></tr></table></figure></p>\n<p>那么可以通过<code>syscall(__NR_gettid)</code>来获取线程的pid。</p>\n<h2 id=\"进程0和进程1\"><a href=\"#进程0和进程1\" class=\"headerlink\" title=\"进程0和进程1\"></a>进程0和进程1</h2><p>每当cpu上电，bios或bootloder之类的引导程序会在一个cpu上创建一个0进程，该进程进而在其它cpu复制一个子进程，并把这些子进程的pid设置为0.0进程是通过全局静态的数据结构来初始化的，特别是主内核页全局目录放在swapper_pg_dir中。</p>\n<p>0进程，进一步调用init函数创建子进程1号进程。</p>\n<p>0进程也叫idle进程，实际上只有当系统中没有其它进程处于running态时，才会执行idle进程。</p>\n<p>1进程也叫init进程，其生命周期直到系统结束，因为init进程负创建及监视其它进程。</p>\n<h2 id=\"孤儿进程\"><a href=\"#孤儿进程\" class=\"headerlink\" title=\"孤儿进程\"></a>孤儿进程</h2><p>一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程一定会将被init进程(进程号为1)所收养吗？先看下面一张图：<br><br><img src=\"https://github.com/howar-luo/image_repo/blob/master/20180730/subreaper.PNG?raw=true\" width=\"60%\" height=\"\"></p>\n<p>当P2和P4被杀死以后，P3被init收养，而P5被subreaper收养。所以，孤儿进程并不一定都是被init收养。</p>\n<p>那么，如何可以成为具有subreaper属性的进程呢？答案是，使用prctl接口:<code>prctl(PR_SET_CHILD_SUBREAPER, 1)</code>。当一个进程具有subreaper属性后，就可以收养进程在托孤过程中经过该进程的孤儿进程。<strong><em>注：该特性是在linux3.4中才加入的。</em></strong></p>\n"},{"title":"初见Makefile","date":"2018-07-17T09:32:02.000Z","_content":"\n\n## 1. makefile中包含什么\n&emsp;&emsp;Makefile中主要包含了五部分内容：显示规则、隐晦规则、变量定义、文件指示、注释。\n\n### 1.1 显示规则\n&emsp;&emsp;显式规则说明了，如何生成一个或多个的目标文件。这是由Makefile的书写者明显指出，要生成的文件，文件的依赖文件，生成的命令。如下所示：\n\n\tmain.o : main.c defs.h\n\t\tcc -c main.c\n\n&emsp;&emsp;显示的指出目标、目标的依赖、已经生成目标的命令。\n\n### 1.2 隐晦规则\n&emsp;&emsp;GNU的make很强大，它可以自动推导文件以及文件依赖关系后面的命令，于是我们就没必要去在每一个[.o]文件后都写上类似的命令，因为，我们的make会自动识别，并自己推导命令。\n\n&emsp;&emsp;只要make看到一个[.o]文件，它就会自动的把[.c]文件加在依赖关系中，如果make找到一个whatever.o，那么whatever.c，就会是whatever.o的依赖文件。并且 cc -c whatever.c 也会被推导出来，于是，我们的makefile再也不用写得这么复杂。我们的是新的makefile又出炉了。\n\n&emsp;&emsp;所以，可以有一下makefile：\n\n\tobjects = main.o kbd.o command.o display.o insert.o search.o files.o utils.o\n\t\n\tedit : $(objects)\n\t\tcc -o edit $(objects)\n\n\tmain.o : defs.h\n\tkbd.o : defs.h command.h\n\tcommand.o : defs.h command.h\n\tdisplay.o : defs.h buffer.h\n\tinsert.o : defs.h buffer.h\n\tsearch.o : defs.h buffer.h\n\tfiles.o : defs.h buffer.h command.h\n\tutils.o : defs.h\n\n### 1.3 变量定义\n&emsp;&emsp;如上一小节中的“objects”即为定义的变量。\n\n&emsp;&emsp;而Makefile中定义变量有四种方式：\n\n&emsp;&emsp;**立即赋值**：a:=b。会立即计算b的值，并赋值给a。如：\n\t\n\t\tvar1:=$(var2) bar\n\t\tvar2:=foo\n&emsp;&emsp;则var1的值就为\"bar\"。\n\n&emsp;&emsp;**延迟赋值**：a=b。相当于C++和java的引用。如果后面b的值改变了，那么a的值也会改变。如：\n\n\t\tvar1=$(var2) bar\n\t\tvar2:=foo\n\n&emsp;&emsp;var1的值就为\"foo bar\"。\n\n&emsp;&emsp;**条件赋值**：a?=b。如果a没有定义，则相当于a=b ，否则不执行任何操作。\n\n&emsp;&emsp;**附加赋值**：a+=b。将b的值添加到a原有的值后面，再赋值给a。如：\n\n\t\tvar1=func1.o func2.0\n\t\tvar2+=$(var1) func3.o\n\n&emsp;&emsp;则var2的值为\"func1.o func2.o func3.o\"。\n### 1.4 文件指示\n&emsp;&emsp;主要分三部分：\n\n&emsp;&emsp;a. 在makefile中引用另一个makefile，就像c语言中的include一样；\n\n&emsp;&emsp;b. 根据某些情况指定Makefile中的有效部分，就像C语言中的预编译#if一样；\n\n&emsp;&emsp;c. 定义一个多行的命令。\n\n### 1.5 注释\n&emsp;&emsp;Makefile中只有行注释，和UNIX的Shell脚本一样，其注释是用“#”字符，这个就像C/C++中的“//”一样。如果你要在你的Makefile中使用“#”字符，可以用反斜框进行转义，如：“/#”。\n","source":"_posts/makefile.md","raw":"---\ntitle: 初见Makefile\ndate: 2018-07-17 17:32:02\ncategories: Linux\ntags: Makefile\n---\n\n\n## 1. makefile中包含什么\n&emsp;&emsp;Makefile中主要包含了五部分内容：显示规则、隐晦规则、变量定义、文件指示、注释。\n\n### 1.1 显示规则\n&emsp;&emsp;显式规则说明了，如何生成一个或多个的目标文件。这是由Makefile的书写者明显指出，要生成的文件，文件的依赖文件，生成的命令。如下所示：\n\n\tmain.o : main.c defs.h\n\t\tcc -c main.c\n\n&emsp;&emsp;显示的指出目标、目标的依赖、已经生成目标的命令。\n\n### 1.2 隐晦规则\n&emsp;&emsp;GNU的make很强大，它可以自动推导文件以及文件依赖关系后面的命令，于是我们就没必要去在每一个[.o]文件后都写上类似的命令，因为，我们的make会自动识别，并自己推导命令。\n\n&emsp;&emsp;只要make看到一个[.o]文件，它就会自动的把[.c]文件加在依赖关系中，如果make找到一个whatever.o，那么whatever.c，就会是whatever.o的依赖文件。并且 cc -c whatever.c 也会被推导出来，于是，我们的makefile再也不用写得这么复杂。我们的是新的makefile又出炉了。\n\n&emsp;&emsp;所以，可以有一下makefile：\n\n\tobjects = main.o kbd.o command.o display.o insert.o search.o files.o utils.o\n\t\n\tedit : $(objects)\n\t\tcc -o edit $(objects)\n\n\tmain.o : defs.h\n\tkbd.o : defs.h command.h\n\tcommand.o : defs.h command.h\n\tdisplay.o : defs.h buffer.h\n\tinsert.o : defs.h buffer.h\n\tsearch.o : defs.h buffer.h\n\tfiles.o : defs.h buffer.h command.h\n\tutils.o : defs.h\n\n### 1.3 变量定义\n&emsp;&emsp;如上一小节中的“objects”即为定义的变量。\n\n&emsp;&emsp;而Makefile中定义变量有四种方式：\n\n&emsp;&emsp;**立即赋值**：a:=b。会立即计算b的值，并赋值给a。如：\n\t\n\t\tvar1:=$(var2) bar\n\t\tvar2:=foo\n&emsp;&emsp;则var1的值就为\"bar\"。\n\n&emsp;&emsp;**延迟赋值**：a=b。相当于C++和java的引用。如果后面b的值改变了，那么a的值也会改变。如：\n\n\t\tvar1=$(var2) bar\n\t\tvar2:=foo\n\n&emsp;&emsp;var1的值就为\"foo bar\"。\n\n&emsp;&emsp;**条件赋值**：a?=b。如果a没有定义，则相当于a=b ，否则不执行任何操作。\n\n&emsp;&emsp;**附加赋值**：a+=b。将b的值添加到a原有的值后面，再赋值给a。如：\n\n\t\tvar1=func1.o func2.0\n\t\tvar2+=$(var1) func3.o\n\n&emsp;&emsp;则var2的值为\"func1.o func2.o func3.o\"。\n### 1.4 文件指示\n&emsp;&emsp;主要分三部分：\n\n&emsp;&emsp;a. 在makefile中引用另一个makefile，就像c语言中的include一样；\n\n&emsp;&emsp;b. 根据某些情况指定Makefile中的有效部分，就像C语言中的预编译#if一样；\n\n&emsp;&emsp;c. 定义一个多行的命令。\n\n### 1.5 注释\n&emsp;&emsp;Makefile中只有行注释，和UNIX的Shell脚本一样，其注释是用“#”字符，这个就像C/C++中的“//”一样。如果你要在你的Makefile中使用“#”字符，可以用反斜框进行转义，如：“/#”。\n","slug":"makefile","published":1,"updated":"2018-07-29T09:32:59.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkgs2ndd000d1guom33ctnkk","content":"<h2 id=\"1-makefile中包含什么\"><a href=\"#1-makefile中包含什么\" class=\"headerlink\" title=\"1. makefile中包含什么\"></a>1. makefile中包含什么</h2><p>&emsp;&emsp;Makefile中主要包含了五部分内容：显示规则、隐晦规则、变量定义、文件指示、注释。</p>\n<h3 id=\"1-1-显示规则\"><a href=\"#1-1-显示规则\" class=\"headerlink\" title=\"1.1 显示规则\"></a>1.1 显示规则</h3><p>&emsp;&emsp;显式规则说明了，如何生成一个或多个的目标文件。这是由Makefile的书写者明显指出，要生成的文件，文件的依赖文件，生成的命令。如下所示：</p>\n<pre><code>main.o : main.c defs.h\n    cc -c main.c\n</code></pre><p>&emsp;&emsp;显示的指出目标、目标的依赖、已经生成目标的命令。</p>\n<h3 id=\"1-2-隐晦规则\"><a href=\"#1-2-隐晦规则\" class=\"headerlink\" title=\"1.2 隐晦规则\"></a>1.2 隐晦规则</h3><p>&emsp;&emsp;GNU的make很强大，它可以自动推导文件以及文件依赖关系后面的命令，于是我们就没必要去在每一个[.o]文件后都写上类似的命令，因为，我们的make会自动识别，并自己推导命令。</p>\n<p>&emsp;&emsp;只要make看到一个[.o]文件，它就会自动的把[.c]文件加在依赖关系中，如果make找到一个whatever.o，那么whatever.c，就会是whatever.o的依赖文件。并且 cc -c whatever.c 也会被推导出来，于是，我们的makefile再也不用写得这么复杂。我们的是新的makefile又出炉了。</p>\n<p>&emsp;&emsp;所以，可以有一下makefile：</p>\n<pre><code>objects = main.o kbd.o command.o display.o insert.o search.o files.o utils.o\n\nedit : $(objects)\n    cc -o edit $(objects)\n\nmain.o : defs.h\nkbd.o : defs.h command.h\ncommand.o : defs.h command.h\ndisplay.o : defs.h buffer.h\ninsert.o : defs.h buffer.h\nsearch.o : defs.h buffer.h\nfiles.o : defs.h buffer.h command.h\nutils.o : defs.h\n</code></pre><h3 id=\"1-3-变量定义\"><a href=\"#1-3-变量定义\" class=\"headerlink\" title=\"1.3 变量定义\"></a>1.3 变量定义</h3><p>&emsp;&emsp;如上一小节中的“objects”即为定义的变量。</p>\n<p>&emsp;&emsp;而Makefile中定义变量有四种方式：</p>\n<p>&emsp;&emsp;<strong>立即赋值</strong>：a:=b。会立即计算b的值，并赋值给a。如：</p>\n<pre><code>var1:=$(var2) bar\nvar2:=foo\n</code></pre><p>&emsp;&emsp;则var1的值就为”bar”。</p>\n<p>&emsp;&emsp;<strong>延迟赋值</strong>：a=b。相当于C++和java的引用。如果后面b的值改变了，那么a的值也会改变。如：</p>\n<pre><code>var1=$(var2) bar\nvar2:=foo\n</code></pre><p>&emsp;&emsp;var1的值就为”foo bar”。</p>\n<p>&emsp;&emsp;<strong>条件赋值</strong>：a?=b。如果a没有定义，则相当于a=b ，否则不执行任何操作。</p>\n<p>&emsp;&emsp;<strong>附加赋值</strong>：a+=b。将b的值添加到a原有的值后面，再赋值给a。如：</p>\n<pre><code>var1=func1.o func2.0\nvar2+=$(var1) func3.o\n</code></pre><p>&emsp;&emsp;则var2的值为”func1.o func2.o func3.o”。</p>\n<h3 id=\"1-4-文件指示\"><a href=\"#1-4-文件指示\" class=\"headerlink\" title=\"1.4 文件指示\"></a>1.4 文件指示</h3><p>&emsp;&emsp;主要分三部分：</p>\n<p>&emsp;&emsp;a. 在makefile中引用另一个makefile，就像c语言中的include一样；</p>\n<p>&emsp;&emsp;b. 根据某些情况指定Makefile中的有效部分，就像C语言中的预编译#if一样；</p>\n<p>&emsp;&emsp;c. 定义一个多行的命令。</p>\n<h3 id=\"1-5-注释\"><a href=\"#1-5-注释\" class=\"headerlink\" title=\"1.5 注释\"></a>1.5 注释</h3><p>&emsp;&emsp;Makefile中只有行注释，和UNIX的Shell脚本一样，其注释是用“#”字符，这个就像C/C++中的“//”一样。如果你要在你的Makefile中使用“#”字符，可以用反斜框进行转义，如：“/#”。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-makefile中包含什么\"><a href=\"#1-makefile中包含什么\" class=\"headerlink\" title=\"1. makefile中包含什么\"></a>1. makefile中包含什么</h2><p>&emsp;&emsp;Makefile中主要包含了五部分内容：显示规则、隐晦规则、变量定义、文件指示、注释。</p>\n<h3 id=\"1-1-显示规则\"><a href=\"#1-1-显示规则\" class=\"headerlink\" title=\"1.1 显示规则\"></a>1.1 显示规则</h3><p>&emsp;&emsp;显式规则说明了，如何生成一个或多个的目标文件。这是由Makefile的书写者明显指出，要生成的文件，文件的依赖文件，生成的命令。如下所示：</p>\n<pre><code>main.o : main.c defs.h\n    cc -c main.c\n</code></pre><p>&emsp;&emsp;显示的指出目标、目标的依赖、已经生成目标的命令。</p>\n<h3 id=\"1-2-隐晦规则\"><a href=\"#1-2-隐晦规则\" class=\"headerlink\" title=\"1.2 隐晦规则\"></a>1.2 隐晦规则</h3><p>&emsp;&emsp;GNU的make很强大，它可以自动推导文件以及文件依赖关系后面的命令，于是我们就没必要去在每一个[.o]文件后都写上类似的命令，因为，我们的make会自动识别，并自己推导命令。</p>\n<p>&emsp;&emsp;只要make看到一个[.o]文件，它就会自动的把[.c]文件加在依赖关系中，如果make找到一个whatever.o，那么whatever.c，就会是whatever.o的依赖文件。并且 cc -c whatever.c 也会被推导出来，于是，我们的makefile再也不用写得这么复杂。我们的是新的makefile又出炉了。</p>\n<p>&emsp;&emsp;所以，可以有一下makefile：</p>\n<pre><code>objects = main.o kbd.o command.o display.o insert.o search.o files.o utils.o\n\nedit : $(objects)\n    cc -o edit $(objects)\n\nmain.o : defs.h\nkbd.o : defs.h command.h\ncommand.o : defs.h command.h\ndisplay.o : defs.h buffer.h\ninsert.o : defs.h buffer.h\nsearch.o : defs.h buffer.h\nfiles.o : defs.h buffer.h command.h\nutils.o : defs.h\n</code></pre><h3 id=\"1-3-变量定义\"><a href=\"#1-3-变量定义\" class=\"headerlink\" title=\"1.3 变量定义\"></a>1.3 变量定义</h3><p>&emsp;&emsp;如上一小节中的“objects”即为定义的变量。</p>\n<p>&emsp;&emsp;而Makefile中定义变量有四种方式：</p>\n<p>&emsp;&emsp;<strong>立即赋值</strong>：a:=b。会立即计算b的值，并赋值给a。如：</p>\n<pre><code>var1:=$(var2) bar\nvar2:=foo\n</code></pre><p>&emsp;&emsp;则var1的值就为”bar”。</p>\n<p>&emsp;&emsp;<strong>延迟赋值</strong>：a=b。相当于C++和java的引用。如果后面b的值改变了，那么a的值也会改变。如：</p>\n<pre><code>var1=$(var2) bar\nvar2:=foo\n</code></pre><p>&emsp;&emsp;var1的值就为”foo bar”。</p>\n<p>&emsp;&emsp;<strong>条件赋值</strong>：a?=b。如果a没有定义，则相当于a=b ，否则不执行任何操作。</p>\n<p>&emsp;&emsp;<strong>附加赋值</strong>：a+=b。将b的值添加到a原有的值后面，再赋值给a。如：</p>\n<pre><code>var1=func1.o func2.0\nvar2+=$(var1) func3.o\n</code></pre><p>&emsp;&emsp;则var2的值为”func1.o func2.o func3.o”。</p>\n<h3 id=\"1-4-文件指示\"><a href=\"#1-4-文件指示\" class=\"headerlink\" title=\"1.4 文件指示\"></a>1.4 文件指示</h3><p>&emsp;&emsp;主要分三部分：</p>\n<p>&emsp;&emsp;a. 在makefile中引用另一个makefile，就像c语言中的include一样；</p>\n<p>&emsp;&emsp;b. 根据某些情况指定Makefile中的有效部分，就像C语言中的预编译#if一样；</p>\n<p>&emsp;&emsp;c. 定义一个多行的命令。</p>\n<h3 id=\"1-5-注释\"><a href=\"#1-5-注释\" class=\"headerlink\" title=\"1.5 注释\"></a>1.5 注释</h3><p>&emsp;&emsp;Makefile中只有行注释，和UNIX的Shell脚本一样，其注释是用“#”字符，这个就像C/C++中的“//”一样。如果你要在你的Makefile中使用“#”字符，可以用反斜框进行转义，如：“/#”。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjkgs2ncx00001guorxtiuur7","category_id":"cjkgs2ncx00041guop6doy7vr","_id":"cjkgs2ndd000e1guowlk2ujfh"},{"post_id":"cjkgs2ncx00021guozaxv0hqp","category_id":"cjkgs2ncx000a1guoss02pbq8","_id":"cjkgs2ndd000i1guo9mk99r68"},{"post_id":"cjkgs2ncx00061guo0wzxzfxf","category_id":"cjkgs2ndd000f1guohf7ibin7","_id":"cjkgs2ndd000n1guof0g0ao64"},{"post_id":"cjkgs2ncx00081guo7jdvk5dw","category_id":"cjkgs2ndd000f1guohf7ibin7","_id":"cjkgs2ndd000r1guoeb7t34gu"},{"post_id":"cjkgs2ncx00091guowwqqx3bc","category_id":"cjkgs2ndd000f1guohf7ibin7","_id":"cjkgs2ndd000u1guoa1ue820p"},{"post_id":"cjkgs2ndd000d1guom33ctnkk","category_id":"cjkgs2ndd000f1guohf7ibin7","_id":"cjkgs2ndd000w1guov32v1js3"}],"PostTag":[{"post_id":"cjkgs2ncx00001guorxtiuur7","tag_id":"cjkgs2ncx00051guo6u54cjkp","_id":"cjkgs2ndd000c1guotyx4yzhs"},{"post_id":"cjkgs2ncx00021guozaxv0hqp","tag_id":"cjkgs2ncx000b1guorc9o6zzd","_id":"cjkgs2ndd000h1guo9yx7pdum"},{"post_id":"cjkgs2ncx00061guo0wzxzfxf","tag_id":"cjkgs2ndd000g1guoy1iis62v","_id":"cjkgs2ndd000l1guoftpfcqae"},{"post_id":"cjkgs2ncx00081guo7jdvk5dw","tag_id":"cjkgs2ndd000k1guonbpps2si","_id":"cjkgs2ndd000p1guoqs8xcys4"},{"post_id":"cjkgs2ncx00091guowwqqx3bc","tag_id":"cjkgs2ndd000k1guonbpps2si","_id":"cjkgs2ndd000t1guoa851gn6h"},{"post_id":"cjkgs2ndd000d1guom33ctnkk","tag_id":"cjkgs2ndd000s1guos2rctt9n","_id":"cjkgs2ndd000v1guo7r678asp"}],"Tag":[{"name":"CPU","_id":"cjkgs2ncx00051guo6u54cjkp"},{"name":"Shell","_id":"cjkgs2ncx000b1guorc9o6zzd"},{"name":"bootup","_id":"cjkgs2ndd000g1guoy1iis62v"},{"name":"Process","_id":"cjkgs2ndd000k1guonbpps2si"},{"name":"Makefile","_id":"cjkgs2ndd000s1guos2rctt9n"}]}}